//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.2.2
//  Machine:  BITZHUWEI-PC
//  DateTime: 2016/5/14 17:24:53
//  UserName: Â®Å
//  GPLEX input file <GLSLLexer.lex - 2016/5/14 17:24:20>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, verbose, noParser, noFiles, minimize
//  Option settings: classes, compressMap, compressNext, embedbuffers
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define STANDALONE
#define NOFILES
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;
using GLSL43Highlight;

namespace Shane
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     public abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     public sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     public sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 1126;
        const int initial = 1127;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

#region user code
public int nextToken() { return yylex(); }
    public int getPos() { return yypos; }
    public int getLength() { return yyleng; }
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {1127, 0};

#region CompressedCharacterMap
    //
    // There are 62 equivalence classes
    // There are 2 character sequence regions
    // There are 1 tables, 126 entries
    // There are 1 runs, 0 singletons
    // Decision tree depth is 1
    //
    static sbyte[] mapC0 = new sbyte[126] {
/*     '\0' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 0, 61, 61, 61, 61, 61, 
/*   '\x10' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
/*   '\x20' */ 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 60, 61, 61, 61, 61, 59, 
/*      '0' */ 57, 26, 19, 20, 21, 57, 50, 57, 51, 57, 61, 61, 61, 61, 61, 61, 
/*      '@' */ 58, 30, 33, 28, 27, 48, 43, 46, 52, 37, 56, 56, 41, 34, 44, 42, 
/*      'P' */ 38, 53, 32, 29, 40, 47, 36, 45, 55, 56, 56, 61, 61, 61, 61, 24, 
/*      '`' */ 61, 12, 17, 8, 14, 2, 11, 35, 16, 5, 54, 18, 13, 22, 7, 6, 
/*      'p' */ 25, 49, 3, 4, 9, 10, 1, 15, 23, 31, 39, 58, 61, 58 };

    static sbyte MapC(int code)
    { // '\0' <= code <= '\U0010FFFF'
      if (code < 126) // '\0' <= code <= '}'
        return mapC0[code - 0];
      else // '~' <= code <= '\U0010FFFF'
        return (sbyte)61;
    }
#endregion

    static Table[] NxS = new Table[1157] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string "v"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 1118, 18, 18, 18, 1119, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[   2] */ // Shortest string "e"
      new Table(49, 40, 18, new short[] {560, 27, 27, 18, 18, 18, 
          18, 18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 816, 18, 18, 18, 18, 18, 27, 27, 27, 18, 1117, 18, 
          18, 27}),
/* NxS[   3] */ // Shortest string "r"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 1096, 18, 18, 18, 1097, 18, 18, 18, 
          18, 18, 1098, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[   4] */ // Shortest string "s"
      new Table(49, 40, 18, new short[] {686, 27, 27, 18, 18, 18, 
          18, 18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 1046, 18, 18, 18, 
          1047, 1048, 18, 1049, 18, 18, 1050, 1051, 18, 18, 27, 27, 27, 1052, 18, 18, 
          18, 27}),
/* NxS[   5] */ // Shortest string "i"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 658, 18, 18, 993, 994, 18, 995, 18, 18, 
          18, 693, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 996, 18, 18, 18, 
          27}),
/* NxS[   6] */ // Shortest string "o"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          985, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[   7] */ // Shortest string "n"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 968, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[   8] */ // Shortest string "c"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 949, 950, 18, 18, 951, 18, 18, 18, 
          18, 18, 816, 952, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[   9] */ // Shortest string "t"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 894, 895, 18, 18, 18, 18, 18, 18, 
          18, 18, 761, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  10] */ // Shortest string "u"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 658, 18, 18, 827, 828, 18, 829, 18, 18, 
          18, 18, 830, 18, 18, 18, 18, 18, 18, 27, 27, 27, 831, 18, 18, 18, 
          27}),
/* NxS[  11] */ // Shortest string "f"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 797, 18, 798, 799, 18, 18, 18, 
          18, 18, 800, 801, 18, 802, 18, 18, 18, 27, 27, 27, 803, 18, 18, 18, 
          27}),
/* NxS[  12] */ // Shortest string "a"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 756, 18, 18, 757, 758, 759, 
          18, 18, 18, 562, 18, 18, 18, 732, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  13] */ // Shortest string "l"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 741, 18, 18, 18, 742, 18, 18, 18, 
          18, 18, 743, 18, 744, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  14] */ // Shortest string "d"
      new Table(43, 46, 18, new short[] {713, 18, 18, 18, 18, 18, 
          18, 27, 27, 18, 18, 18, 18, 18, 27, 29, -1, -1, -1, -1, 658, 709, 
          18, 18, 710, 711, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          27, 27, 27, 712, 18, 18, 18, 27}),
/* NxS[  15] */ // Shortest string "w"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 699, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 700, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  16] */ // Shortest string "h"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 697, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  17] */ // Shortest string "b"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 658, 18, 659, 18, 660, 661, 18, 18, 18, 
          662, 18, 546, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  18] */ // Shortest string "k"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  19] */ // Shortest string "2"
      new Table(50, 39, -1, new short[] {19, 19, -1, -1, -1, -1, 
          -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, -1, -1, -1, -1, 
          19}),
/* NxS[  20] */ // Shortest string "m"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 596, 18, 18, 597, 598, 18, 18, 18, 
          18, 18, 599, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  21] */ // Shortest string "p"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 563, 18, 18, 564, 18, 18, 18, 
          18, 18, 565, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  22] */ // Shortest string "g"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 60, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 61, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  23] */ // Shortest string "E"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 26, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 28, 18, 18, 18, 
          27}),
/* NxS[  24] */ // Shortest string "//"
      new Table(0, 1, 24, new short[] {-1}),
/* NxS[  25] */ new Table(0, 0, -1, null), // Shortest string "/**/"
/* NxS[  26] */ // Shortest string "En"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 45, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  27] */ // Shortest string "v2"
      new Table(50, 48, -1, new short[] {27, 27, -1, -1, -1, -1, 
          -1, 27, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, -1, 29, 29, 29, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 27, 27, -1, -1, -1, -1, 
          27, -1, -1, -1, -1, -1, -1, -1, -1, 29}),
/* NxS[  28] */ // Shortest string "Em"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 31, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  29] */ // Shortest string "v@"
      new Table(50, 48, -1, new short[] {30, 30, -1, -1, -1, -1, 
          -1, 30, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, -1, 29, 29, 29, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 30, 30, -1, -1, -1, -1, 
          30, -1, -1, -1, -1, -1, -1, -1, -1, 29}),
/* NxS[  30] */ // Shortest string "v@2"
      new Table(50, 39, -1, new short[] {30, 30, -1, -1, -1, -1, 
          -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 30, 30, -1, -1, -1, -1, 
          30}),
/* NxS[  31] */ // Shortest string "Emi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 32, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  32] */ // Shortest string "Emit"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 33, 18, 18, 18, 18, 18, 18, 34, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[  33] */ // Shortest string "EmitS"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 40, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  34] */ // Shortest string "EmitV"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 35, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  35] */ // Shortest string "EmitVe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 36, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  36] */ // Shortest string "EmitVer"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 37, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  37] */ // Shortest string "EmitVert"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 38, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  38] */ // Shortest string "atomicMa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 39, 18, 18, 
          27}),
/* NxS[  39] */ // Shortest string "fma"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  40] */ // Shortest string "EmitSt"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 41, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  41] */ // Shortest string "EmitStr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 42, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  42] */ // Shortest string "EmitStre"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 43, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  43] */ // Shortest string "EmitStrea"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 44, 18, 18, 18, 
          27}),
/* NxS[  44] */ // Shortest string "EmitStream"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[  45] */ // Shortest string "End"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 46, 18, 18, 18, 18, 18, 18, 18, 18, 47, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[  46] */ // Shortest string "EndS"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 55, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  47] */ // Shortest string "EndP"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 48, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  48] */ // Shortest string "EndPr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 49, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  49] */ // Shortest string "EndPri"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 50, 18, 18, 18, 
          27}),
/* NxS[  50] */ // Shortest string "EndPrim"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 51, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  51] */ // Shortest string "EndPrimi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 52, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  52] */ // Shortest string "EndPrimit"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 53, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  53] */ // Shortest string "EndPrimiti"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 54, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  54] */ // Shortest string "distanc"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 39, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  55] */ // Shortest string "EndSt"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 56, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  56] */ // Shortest string "EndStr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 57, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  57] */ // Shortest string "EndStre"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 58, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  58] */ // Shortest string "EndStrea"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 59, 18, 18, 18, 
          27}),
/* NxS[  59] */ // Shortest string "EndStream"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 47, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[  60] */ // Shortest string "gr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 535, 18, 18, 18, 536, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  61] */ // Shortest string "gl"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 62, 18, 
          27}),
/* NxS[  62] */ // Shortest string "gl_"
      new Table(19, 50, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 64, 65, 66, 18, 18, 18, 18, 67, 18, 68, 69, 70, 18, 71, 
          72, 18, 73, 74, 75, 76, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 188, 63}),
/* NxS[  63] */ // Shortest string "gl_o"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          399, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  64] */ // Shortest string "gl_D"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 528, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  65] */ // Shortest string "gl_C"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 519, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  66] */ // Shortest string "gl_S"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 509, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  67] */ // Shortest string "gl_M"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 227, 18, 18, 18, 18, 
          18, 18, 228, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  68] */ // Shortest string "gl_V"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 215, 18, 18, 216, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  69] */ // Shortest string "gl_I"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 209, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  70] */ // Shortest string "gl_P"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 173, 174, 18, 18, 175, 18, 18, 18, 
          18, 18, 176, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  71] */ // Shortest string "gl_T"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 161, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  72] */ // Shortest string "gl_L"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 140, 18, 18, 18, 
          18, 18, 141, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  73] */ // Shortest string "gl_F"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 121, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  74] */ // Shortest string "gl_N"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          105, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  75] */ // Shortest string "gl_W"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 94, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  76] */ // Shortest string "gl_G"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 77, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  77] */ // Shortest string "gl_Gl"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 78, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  78] */ // Shortest string "gl_Glo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 79, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  79] */ // Shortest string "gl_Glob"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 80, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  80] */ // Shortest string "gl_Globa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 81, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  81] */ // Shortest string "gl_Global"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 82, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[  82] */ // Shortest string "gl_GlobalI"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 83, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  83] */ // Shortest string "gl_GlobalIn"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 84, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  84] */ // Shortest string "gl_Inv"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 85, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  85] */ // Shortest string "gl_Invo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 86, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  86] */ // Shortest string "gl_Invoc"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 87, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  87] */ // Shortest string "gl_Invoca"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 88, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  88] */ // Shortest string "gl_Invocat"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 89, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  89] */ // Shortest string "gl_Invocati"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 90, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  90] */ // Shortest string "gl_Invocatio"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 91, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  91] */ // Shortest string "gl_Vertex"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 92, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[  92] */ // Shortest string "gl_SampleI"
      new Table(50, 40, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 93}),
/* NxS[  93] */ // Shortest string "gl_in"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  94] */ // Shortest string "gl_Wo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 95, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  95] */ // Shortest string "gl_Wor"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 96, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  96] */ // Shortest string "gl_Work"
      new Table(46, 43, 18, new short[] {97, 18, 18, 18, 27, 27, 
          18, 18, 18, 18, 18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 
          18, 18, 18, 18, 27}),
/* NxS[  97] */ // Shortest string "gl_WorkG"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 98, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  98] */ // Shortest string "gl_WorkGr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 99, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[  99] */ // Shortest string "gl_WorkGro"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          100, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 100] */ // Shortest string "gl_WorkGrou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 101, 
          27}),
/* NxS[ 101] */ // Shortest string "gl_WorkGroup"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 102, 18, 18, 18, 18, 18, 18, 18, 92, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 102] */ // Shortest string "gl_PointS"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 103, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 103] */ // Shortest string "gl_PointSi"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 104, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 104] */ // Shortest string "gl_PointSiz"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 93, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 105] */ // Shortest string "gl_Nu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 106, 18, 18, 18, 
          27}),
/* NxS[ 106] */ // Shortest string "gl_Num"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 107, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 108, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 107] */ // Shortest string "gl_NumS"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 117, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 108] */ // Shortest string "gl_NumW"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 109, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 109] */ // Shortest string "gl_NumWo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 110, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 110] */ // Shortest string "gl_NumWor"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 111, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 111] */ // Shortest string "gl_NumWork"
      new Table(46, 43, 18, new short[] {112, 18, 18, 18, 27, 27, 
          18, 18, 18, 18, 18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 
          18, 18, 18, 18, 27}),
/* NxS[ 112] */ // Shortest string "gl_NumWorkG"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 113, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 113] */ // Shortest string "gl_NumWorkGr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 114, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 114] */ // Shortest string "gl_NumWorkGro"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          115, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 115] */ // Shortest string "gl_NumWorkGrou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 116, 
          27}),
/* NxS[ 116] */ // Shortest string "gl_NumSample"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 93, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 117] */ // Shortest string "gl_NumSa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 118, 18, 18, 18, 
          27}),
/* NxS[ 118] */ // Shortest string "gl_NumSam"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 119, 
          27}),
/* NxS[ 119] */ // Shortest string "gl_NumSamp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 120, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 120] */ // Shortest string "gl_NumSampl"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 116, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 121] */ // Shortest string "gl_Fr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 122, 18, 18, 18, 
          18, 18, 123, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 122] */ // Shortest string "gl_Fro"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 133, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 123] */ // Shortest string "gl_Fra"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 124, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 124] */ // Shortest string "gl_Frag"
      new Table(50, 41, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 125, 126}),
/* NxS[ 125] */ // Shortest string "gl_FragD"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 130, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 126] */ // Shortest string "gl_FragC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 127, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 127] */ // Shortest string "gl_FragCo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 128, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 128] */ // Shortest string "gl_FragCoo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 129, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 129] */ // Shortest string "gl_FragCoor"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 93, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 130] */ // Shortest string "gl_FragDe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 131, 
          27}),
/* NxS[ 131] */ // Shortest string "gl_FragDep"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 132, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 132] */ // Shortest string "gl_FragDept"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 93, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 133] */ // Shortest string "gl_Fron"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 134, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 134] */ // Shortest string "gl_Front"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 135, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 135] */ // Shortest string "gl_FrontF"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 136, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 136] */ // Shortest string "gl_FrontFa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 137, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 137] */ // Shortest string "gl_FrontFac"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 138, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 138] */ // Shortest string "gl_FrontFaci"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 139, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 139] */ // Shortest string "gl_FrontFacin"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 93, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 140] */ // Shortest string "gl_Lo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 144, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 141] */ // Shortest string "gl_La"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 142, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 142] */ // Shortest string "gl_Lay"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 143, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 143] */ // Shortest string "gl_Laye"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 93, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 144] */ // Shortest string "gl_Loc"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 145, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 145] */ // Shortest string "gl_Loca"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 146, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 146] */ // Shortest string "gl_Local"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 147, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 147] */ // Shortest string "gl_LocalI"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 148, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 148] */ // Shortest string "gl_LocalIn"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 149, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 149] */ // Shortest string "gl_LocalInv"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 150, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 150] */ // Shortest string "gl_LocalInvo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 151, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 151] */ // Shortest string "gl_LocalInvoc"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 152, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 152] */ // Shortest string "gl_LocalInvoca"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 153, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 153] */ // Shortest string "gl_LocalInvocat"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 154, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 154] */ // Shortest string "gl_LocalInvocati"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 155, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 155] */ // Shortest string "gl_LocalInvocatio"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 156, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 156] */ // Shortest string "gl_LocalInvocation"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 157, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 157] */ // Shortest string "gl_LocalInvocationI"
      new Table(50, 40, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 158, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 93}),
/* NxS[ 158] */ // Shortest string "gl_ViewportIn"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 159, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 159] */ // Shortest string "gl_PerVert"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 160, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 160] */ // Shortest string "gl_PerVerte"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 93, 18, 18, 
          27}),
/* NxS[ 161] */ // Shortest string "gl_Te"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 162, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 162] */ // Shortest string "gl_Tes"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 163, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 163] */ // Shortest string "gl_Tess"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          164, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 164] */ // Shortest string "gl_TessL"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 165, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 165] */ // Shortest string "gl_TessLe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 166, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 166] */ // Shortest string "gl_TessLev"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 167, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 167] */ // Shortest string "gl_TessLeve"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 168, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 168] */ // Shortest string "gl_TessLevel"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 169, 18, 18, 18, 
          18, 170, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 169] */ // Shortest string "gl_TessLevelI"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 172, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 170] */ // Shortest string "gl_TessLevelO"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          171, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 171] */ // Shortest string "gl_TessLevelOu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 142, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 172] */ // Shortest string "gl_TessLevelIn"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 142, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 173] */ // Shortest string "gl_Pe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 205, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 174] */ // Shortest string "gl_Pr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 196, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 175] */ // Shortest string "gl_Po"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 189, 190, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 176] */ // Shortest string "gl_Pa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 177, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 177] */ // Shortest string "gl_Pat"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 178, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 178] */ // Shortest string "gl_Patc"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 179, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 179] */ // Shortest string "gl_Patch"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 180, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 180] */ // Shortest string "gl_PatchV"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 181, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 181] */ // Shortest string "gl_PatchVe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 182, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 182] */ // Shortest string "gl_PatchVer"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 183, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 183] */ // Shortest string "gl_PatchVert"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 184, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 184] */ // Shortest string "gl_PatchVerti"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 185, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 185] */ // Shortest string "gl_PatchVertic"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 186, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 186] */ // Shortest string "gl_PatchVertice"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 187, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 187] */ // Shortest string "gl_PatchVertices"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 188, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 188] */ // Shortest string "gl_i"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 93, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 189] */ // Shortest string "gl_Pos"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 193, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 190] */ // Shortest string "gl_Poi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 191, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 191] */ // Shortest string "gl_Poin"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 192, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 192] */ // Shortest string "gl_Point"
      new Table(50, 42, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 126, 102}),
/* NxS[ 193] */ // Shortest string "gl_Posi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 194, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 194] */ // Shortest string "gl_Posit"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 195, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 195] */ // Shortest string "gl_Positi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 188, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 196] */ // Shortest string "gl_Pri"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 197, 18, 18, 18, 
          27}),
/* NxS[ 197] */ // Shortest string "gl_Prim"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 198, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 198] */ // Shortest string "gl_Primi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 199, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 199] */ // Shortest string "gl_Primit"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 200, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 200] */ // Shortest string "gl_Primiti"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 201, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 201] */ // Shortest string "gl_Primitiv"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 202, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 202] */ // Shortest string "gl_Primitive"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 203, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 203] */ // Shortest string "gl_PrimitiveI"
      new Table(50, 40, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 204}),
/* NxS[ 204] */ // Shortest string "gl_SampleMask"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 188, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 205] */ // Shortest string "gl_Per"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 206, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 206] */ // Shortest string "gl_PerV"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 207, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 207] */ // Shortest string "gl_PerVe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 208, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 208] */ // Shortest string "gl_PerVer"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 159, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 209] */ // Shortest string "gl_In"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 84, 18, 18, 210, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 210] */ // Shortest string "gl_Ins"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 211, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 211] */ // Shortest string "gl_Inst"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 212, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 212] */ // Shortest string "gl_Insta"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 213, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 213] */ // Shortest string "gl_Instan"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 214, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 214] */ // Shortest string "gl_Instanc"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 91, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 215] */ // Shortest string "gl_Ve"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 224, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 216] */ // Shortest string "gl_Vi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 217, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 217] */ // Shortest string "gl_Vie"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 218, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 218] */ // Shortest string "gl_View"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 219, 
          27}),
/* NxS[ 219] */ // Shortest string "gl_Viewp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 220, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 220] */ // Shortest string "gl_Viewpo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 221, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 221] */ // Shortest string "gl_Viewpor"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 222, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 222] */ // Shortest string "gl_Viewport"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 223, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 223] */ // Shortest string "gl_ViewportI"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 158, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 224] */ // Shortest string "gl_Ver"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 225, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 225] */ // Shortest string "gl_Vert"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 226, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 226] */ // Shortest string "gl_Verte"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 91, 18, 18, 
          27}),
/* NxS[ 227] */ // Shortest string "gl_Mi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 507, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 228] */ // Shortest string "gl_Ma"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 229, 18, 18, 
          27}),
/* NxS[ 229] */ // Shortest string "gl_Max"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 230, 231, 18, 232, 18, 18, 18, 18, 18, 233, 234, 235, 18, 236, 
          18, 18, 237, 18, 18, 238, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 230] */ // Shortest string "gl_MaxD"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 504, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 231] */ // Shortest string "gl_MaxC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 448, 18, 18, 18, 
          18, 18, 18, 449, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 232] */ // Shortest string "gl_MaxA"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 425, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 233] */ // Shortest string "gl_MaxV"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 404, 18, 18, 405, 18, 18, 18, 18, 
          18, 18, 406, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 234] */ // Shortest string "gl_MaxI"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 400, 18, 18, 18, 
          27}),
/* NxS[ 235] */ // Shortest string "gl_MaxP"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 380, 18, 18, 18, 18, 18, 18, 
          18, 18, 381, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 236] */ // Shortest string "gl_MaxT"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 348, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 237] */ // Shortest string "gl_MaxF"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 330, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 238] */ // Shortest string "gl_MaxG"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 239, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 239] */ // Shortest string "gl_MaxGe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 240, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 240] */ // Shortest string "gl_MaxGeo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 241, 18, 18, 18, 
          27}),
/* NxS[ 241] */ // Shortest string "gl_MaxGeom"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 242, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 242] */ // Shortest string "gl_MaxGeome"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 243, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 243] */ // Shortest string "gl_MaxGeomet"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 244, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 244] */ // Shortest string "gl_MaxGeometr"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 245, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 245] */ // Shortest string "gl_MaxGeometry"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 246, 18, 18, 18, 18, 18, 247, 248, 18, 18, 249, 
          18, 250, 18, 18, 18, 18, 251, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 246] */ // Shortest string "gl_MaxComputeA"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 313, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 247] */ // Shortest string "gl_MaxGeometryV"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 308, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 248] */ // Shortest string "gl_MaxFragmentI"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 283, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 298, 18, 18, 18, 
          27}),
/* NxS[ 249] */ // Shortest string "gl_MaxGeometryT"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 276, 18, 18, 18, 277, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 250] */ // Shortest string "gl_MaxGeometryO"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          266, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 251] */ // Shortest string "gl_MaxComputeU"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 252, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 252] */ // Shortest string "gl_MaxComputeUn"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 253, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 253] */ // Shortest string "gl_MaxComputeUni"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 254, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 254] */ // Shortest string "gl_MaxComputeUnif"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 255, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 255] */ // Shortest string "gl_MaxComputeUnifo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 256, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 256] */ // Shortest string "gl_MaxComputeUnifor"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 257, 18, 18, 18, 
          27}),
/* NxS[ 257] */ // Shortest string "gl_MaxTessPatch"
      new Table(50, 41, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 258}),
/* NxS[ 258] */ // Shortest string "gl_MaxVaryingC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 259, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 259] */ // Shortest string "gl_MaxVaryingCo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 260, 18, 18, 18, 
          27}),
/* NxS[ 260] */ // Shortest string "gl_MaxVaryingCom"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 261, 
          27}),
/* NxS[ 261] */ // Shortest string "gl_MaxVaryingComp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 262, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 262] */ // Shortest string "gl_MaxVaryingCompo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 263, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 263] */ // Shortest string "gl_MaxVaryingCompon"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 264, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 264] */ // Shortest string "gl_MaxVaryingCompone"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 265, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 265] */ // Shortest string "gl_MaxViewpor"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 116, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 266] */ // Shortest string "gl_MaxGeometryOu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 267, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 267] */ // Shortest string "gl_MaxGeometryOut"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 268, 
          27}),
/* NxS[ 268] */ // Shortest string "gl_MaxGeometryOutp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          269, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 269] */ // Shortest string "gl_MaxGeometryOutpu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 270, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 270] */ // Shortest string "gl_MaxGeometryOutput"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 258, 18, 18, 18, 18, 18, 18, 18, 271, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 271] */ // Shortest string "gl_MaxPatchV"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 272, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 272] */ // Shortest string "gl_MaxPatchVe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 273, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 273] */ // Shortest string "gl_MaxPatchVer"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 274, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 274] */ // Shortest string "gl_MaxPatchVert"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 275, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 275] */ // Shortest string "gl_MaxClipDistan"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 120, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 276] */ // Shortest string "gl_MaxVertexTe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 286, 18, 18, 
          27}),
/* NxS[ 277] */ // Shortest string "gl_MaxGeometryTo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 278, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 278] */ // Shortest string "gl_MaxGeometryTot"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 279, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 279] */ // Shortest string "gl_MaxGeometryTota"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 280, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 280] */ // Shortest string "gl_MaxGeometryTotal"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 281, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 281] */ // Shortest string "gl_MaxVertexO"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          282, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 282] */ // Shortest string "gl_MaxVertexOu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 283, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 283] */ // Shortest string "gl_MaxVertexOut"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 284, 
          27}),
/* NxS[ 284] */ // Shortest string "gl_MaxVertexOutp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          285, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 285] */ // Shortest string "gl_MaxVertexOutpu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 257, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 286] */ // Shortest string "gl_MaxTex"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 287, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 287] */ // Shortest string "gl_MaxText"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          288, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 288] */ // Shortest string "gl_MaxTextu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 289, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 289] */ // Shortest string "gl_MaxTextur"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 290, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 290] */ // Shortest string "gl_MaxTexture"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 291, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 291] */ // Shortest string "gl_MaxTextureI"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 292, 18, 18, 18, 
          27}),
/* NxS[ 292] */ // Shortest string "gl_MaxTextureIm"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 293, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 293] */ // Shortest string "gl_MaxTextureIma"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 294, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 294] */ // Shortest string "gl_MaxTextureImag"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 295, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 295] */ // Shortest string "gl_MaxTextureImage"
      new Table(47, 42, 18, new short[] {296, 18, 18, 27, 27, 18, 
          18, 18, 18, 18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 
          18, 18, 18, 27}),
/* NxS[ 296] */ // Shortest string "gl_MaxImageU"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 297, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 297] */ // Shortest string "gl_MaxImageUn"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 265, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 298] */ // Shortest string "gl_MaxVertexIm"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 299, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 299] */ // Shortest string "gl_MaxVertexIma"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 300, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 300] */ // Shortest string "gl_MaxVertexImag"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 301, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 301] */ // Shortest string "gl_MaxVertexImage"
      new Table(47, 42, 18, new short[] {302, 18, 18, 27, 27, 18, 
          18, 18, 18, 18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 
          18, 18, 18, 27}),
/* NxS[ 302] */ // Shortest string "gl_MaxVertexImageU"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 303, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 303] */ // Shortest string "gl_MaxVertexImageUn"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 304, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 304] */ // Shortest string "gl_MaxVertexImageUni"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 305, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 305] */ // Shortest string "gl_MaxVertexImageUnif"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 306, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 306] */ // Shortest string "gl_MaxVertexImageUnifo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 307, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 307] */ // Shortest string "gl_MaxVertexImageUnifor"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 116, 18, 18, 18, 
          27}),
/* NxS[ 308] */ // Shortest string "gl_MaxGeometryVa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 309, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 309] */ // Shortest string "gl_MaxGeometryVar"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 310, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 310] */ // Shortest string "gl_MaxGeometryVary"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 311, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 311] */ // Shortest string "gl_MaxGeometryVaryi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 312, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 312] */ // Shortest string "gl_MaxGeometryVaryin"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 257, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 313] */ // Shortest string "gl_MaxComputeAt"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 314, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 314] */ // Shortest string "gl_MaxVertexAto"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 315, 18, 18, 18, 
          27}),
/* NxS[ 315] */ // Shortest string "gl_MaxVertexAtom"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 316, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 316] */ // Shortest string "gl_MaxVertexAtomi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 317, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 317] */ // Shortest string "gl_MaxVertexAtomic"
      new Table(50, 41, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 318}),
/* NxS[ 318] */ // Shortest string "gl_MaxVertexAtomicC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 319, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 319] */ // Shortest string "gl_MaxVertexAtomicCo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          320, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 320] */ // Shortest string "gl_MaxVertexAtomicCou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 321, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 321] */ // Shortest string "gl_MaxVertexAtomicCoun"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 322, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 322] */ // Shortest string "gl_MaxVertexAtomicCount"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 323, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 323] */ // Shortest string "gl_MaxVertexAtomicCounte"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 324, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 324] */ // Shortest string "gl_MaxVertexAtomicCounter"
      new Table(50, 46, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 93, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 18, 18, 18, 18, 18, 325}),
/* NxS[ 325] */ // Shortest string "gl_MaxDrawB"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          326, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 326] */ // Shortest string "gl_MaxDrawBu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 327, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 327] */ // Shortest string "gl_MaxDrawBuf"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 328, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 328] */ // Shortest string "gl_MaxDrawBuff"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 329, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 329] */ // Shortest string "gl_MaxDrawBuffe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 116, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 330] */ // Shortest string "gl_MaxFr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 331, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 331] */ // Shortest string "gl_MaxFra"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 332, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 332] */ // Shortest string "gl_MaxFrag"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 333, 18, 18, 18, 
          27}),
/* NxS[ 333] */ // Shortest string "gl_MaxFragm"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 334, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 334] */ // Shortest string "gl_MaxFragme"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 335, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 335] */ // Shortest string "gl_MaxFragmen"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 336, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 336] */ // Shortest string "gl_MaxFragment"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 246, 18, 18, 18, 18, 18, 18, 248, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 337, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 337] */ // Shortest string "gl_MaxVertexU"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 338, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 338] */ // Shortest string "gl_MaxVertexUn"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 339, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 339] */ // Shortest string "gl_MaxVertexUni"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 340, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 340] */ // Shortest string "gl_MaxVertexUnif"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 341, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 341] */ // Shortest string "gl_MaxVertexUnifo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 342, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 342] */ // Shortest string "gl_MaxVertexUnifor"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 343, 18, 18, 18, 
          27}),
/* NxS[ 343] */ // Shortest string "gl_MaxVarying"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 258, 18, 18, 18, 18, 18, 18, 18, 344, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 344] */ // Shortest string "gl_MaxVaryingV"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 345, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 345] */ // Shortest string "gl_MaxVaryingVe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 346, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 346] */ // Shortest string "gl_MaxVaryingVec"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 347, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 347] */ // Shortest string "gl_MaxVaryingVect"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 329, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 348] */ // Shortest string "gl_MaxTe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 349, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 286, 18, 18, 
          27}),
/* NxS[ 349] */ // Shortest string "gl_MaxTes"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 350, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 350] */ // Shortest string "gl_MaxTess"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 351, 18, 18, 18, 18, 18, 18, 18, 18, 18, 352, 18, 18, 
          18, 18, 18, 18, 18, 353, 18, 354, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 351] */ // Shortest string "gl_MaxTessC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 374, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 352] */ // Shortest string "gl_MaxTessP"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 371, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 353] */ // Shortest string "gl_MaxTessG"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 365, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 354] */ // Shortest string "gl_MaxTessE"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 355, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 355] */ // Shortest string "gl_MaxTessEv"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 356, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 356] */ // Shortest string "gl_MaxTessEva"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 357, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 357] */ // Shortest string "gl_MaxTessEval"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          358, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 358] */ // Shortest string "gl_MaxTessEvalu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 359, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 359] */ // Shortest string "gl_MaxTessEvalua"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 360, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 360] */ // Shortest string "gl_MaxTessEvaluat"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 361, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 361] */ // Shortest string "gl_MaxTessEvaluati"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 362, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 362] */ // Shortest string "gl_MaxTessEvaluatio"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 363, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 363] */ // Shortest string "gl_MaxTessEvaluation"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 246, 18, 18, 18, 18, 18, 18, 248, 18, 18, 364, 
          18, 281, 18, 18, 18, 18, 251, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 364] */ // Shortest string "gl_MaxVertexT"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 276, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 365] */ // Shortest string "gl_MaxTessGe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 366, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 366] */ // Shortest string "gl_MaxTessGen"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          367, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 367] */ // Shortest string "gl_MaxTessGenL"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 368, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 368] */ // Shortest string "gl_MaxTessGenLe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 369, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 369] */ // Shortest string "gl_MaxTessGenLev"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 370, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 370] */ // Shortest string "gl_MaxTessGenLeve"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 93, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 371] */ // Shortest string "gl_MaxTessPa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 372, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 372] */ // Shortest string "gl_MaxTessPat"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 373, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 373] */ // Shortest string "gl_MaxTessPatc"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 257, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 374] */ // Shortest string "gl_MaxTessCo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 375, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 375] */ // Shortest string "gl_MaxTessCon"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 376, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 376] */ // Shortest string "gl_MaxTessCont"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 377, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 377] */ // Shortest string "gl_MaxTessContr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 378, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 378] */ // Shortest string "gl_MaxTessContro"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 379, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 379] */ // Shortest string "gl_MaxTessControl"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 246, 18, 18, 18, 18, 18, 18, 248, 18, 18, 249, 
          18, 281, 18, 18, 18, 18, 251, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 380] */ // Shortest string "gl_MinPr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 385, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 381] */ // Shortest string "gl_MaxPa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 382, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 382] */ // Shortest string "gl_MaxPat"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 383, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 383] */ // Shortest string "gl_MaxPatc"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 384, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 384] */ // Shortest string "gl_MaxPatch"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 271, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 385] */ // Shortest string "gl_MinPro"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 386, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 386] */ // Shortest string "gl_MinProg"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 387, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 387] */ // Shortest string "gl_MinProgr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 388, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 388] */ // Shortest string "gl_MinProgra"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 389, 18, 18, 18, 
          27}),
/* NxS[ 389] */ // Shortest string "gl_MinProgram"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 390, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 390] */ // Shortest string "gl_MinProgramT"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 391, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 391] */ // Shortest string "gl_MinProgramTe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 392, 18, 18, 
          27}),
/* NxS[ 392] */ // Shortest string "gl_MinProgramTex"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 393, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 393] */ // Shortest string "gl_MinProgramTexe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 394, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 394] */ // Shortest string "gl_MinProgramTexel"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 395, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 395] */ // Shortest string "gl_MinProgramTexelO"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 396, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 396] */ // Shortest string "gl_MinProgramTexelOf"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 397, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 397] */ // Shortest string "gl_MinProgramTexelOff"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 398, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 398] */ // Shortest string "gl_MinProgramTexelOffs"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 399, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 399] */ // Shortest string "gl_ou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 93, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 400] */ // Shortest string "gl_MaxIm"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 401, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 401] */ // Shortest string "gl_MaxIma"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 402, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 402] */ // Shortest string "gl_MaxImag"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 403, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 403] */ // Shortest string "gl_MaxImage"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 107, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 296, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 404] */ // Shortest string "gl_MaxVe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 415, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 405] */ // Shortest string "gl_MaxVi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 411, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 406] */ // Shortest string "gl_MaxVa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 407, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 407] */ // Shortest string "gl_MaxVar"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 408, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 408] */ // Shortest string "gl_MaxVary"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 409, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 409] */ // Shortest string "gl_MaxVaryi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 410, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 410] */ // Shortest string "gl_MaxVaryin"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 343, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 411] */ // Shortest string "gl_MaxVie"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 412, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 412] */ // Shortest string "gl_MaxView"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 413, 
          27}),
/* NxS[ 413] */ // Shortest string "gl_MaxViewp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 414, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 414] */ // Shortest string "gl_MaxViewpo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 265, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 415] */ // Shortest string "gl_MaxVer"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 416, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 416] */ // Shortest string "gl_MaxVert"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 417, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 417] */ // Shortest string "gl_MaxVerte"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 418, 18, 18, 
          27}),
/* NxS[ 418] */ // Shortest string "gl_MaxVertex"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 419, 18, 18, 18, 18, 18, 18, 420, 18, 18, 364, 
          18, 281, 18, 18, 18, 18, 337, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 419] */ // Shortest string "gl_MaxVertexA"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 421, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 420] */ // Shortest string "gl_MaxVertexI"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 298, 18, 18, 18, 
          27}),
/* NxS[ 421] */ // Shortest string "gl_MaxVertexAt"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 314, 18, 18, 422, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 422] */ // Shortest string "gl_MaxVertexAtt"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 423, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 423] */ // Shortest string "gl_MaxVertexAttr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 424, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 424] */ // Shortest string "gl_MaxVertexAttri"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 116, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 425] */ // Shortest string "gl_MaxAt"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 426, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 426] */ // Shortest string "gl_MaxAto"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 427, 18, 18, 18, 
          27}),
/* NxS[ 427] */ // Shortest string "gl_MaxAtom"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 428, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 428] */ // Shortest string "gl_MaxAtomi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 429, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 429] */ // Shortest string "gl_MaxAtomic"
      new Table(50, 41, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 430}),
/* NxS[ 430] */ // Shortest string "gl_MaxAtomicC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 431, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 431] */ // Shortest string "gl_MaxAtomicCo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          432, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 432] */ // Shortest string "gl_MaxAtomicCou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 433, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 433] */ // Shortest string "gl_MaxAtomicCoun"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 434, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 434] */ // Shortest string "gl_MaxAtomicCount"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 435, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 435] */ // Shortest string "gl_MaxAtomicCounte"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 436, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 436] */ // Shortest string "gl_MaxAtomicCounter"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 437, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 437] */ // Shortest string "gl_MaxAtomicCounterB"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 438, 18, 18, 18, 18, 
          439, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 438] */ // Shortest string "gl_MaxAtomicCounterBi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 444, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 439] */ // Shortest string "gl_MaxAtomicCounterBu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 440, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 440] */ // Shortest string "gl_MaxAtomicCounterBuf"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 441, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 441] */ // Shortest string "gl_MaxAtomicCounterBuff"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 442, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 442] */ // Shortest string "gl_MaxAtomicCounterBuffe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 443, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 443] */ // Shortest string "gl_MaxAtomicCounterBuffer"
      new Table(50, 42, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 18, 102}),
/* NxS[ 444] */ // Shortest string "gl_MaxAtomicCounterBin"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 445, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 445] */ // Shortest string "gl_MaxAtomicCounterBind"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 446, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 446] */ // Shortest string "gl_MaxAtomicCounterBindi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 447, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 447] */ // Shortest string "gl_MaxAtomicCounterBindin"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 116, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 448] */ // Shortest string "gl_MaxCo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 457, 18, 18, 18, 
          27}),
/* NxS[ 449] */ // Shortest string "gl_MaxCl"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 450, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 450] */ // Shortest string "gl_MaxCli"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 451, 
          27}),
/* NxS[ 451] */ // Shortest string "gl_MaxClip"
      new Table(50, 40, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 452}),
/* NxS[ 452] */ // Shortest string "gl_MaxClipD"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 453, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 453] */ // Shortest string "gl_MaxClipDi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 454, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 454] */ // Shortest string "gl_MaxClipDis"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 455, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 455] */ // Shortest string "gl_MaxClipDist"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 456, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 456] */ // Shortest string "gl_MaxClipDista"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 275, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 457] */ // Shortest string "gl_MaxCom"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 458, 18, 27, 27, 27, 18, 18, 18, 459, 
          27}),
/* NxS[ 458] */ // Shortest string "gl_MaxComb"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 475, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 459] */ // Shortest string "gl_MaxComp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          460, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 460] */ // Shortest string "gl_MaxCompu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 461, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 461] */ // Shortest string "gl_MaxComput"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 462, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 462] */ // Shortest string "gl_MaxCompute"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 246, 18, 18, 18, 18, 18, 18, 420, 18, 18, 364, 
          18, 18, 18, 18, 463, 18, 251, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 463] */ // Shortest string "gl_MaxComputeW"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 464, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 464] */ // Shortest string "gl_MaxComputeWo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 465, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 465] */ // Shortest string "gl_MaxComputeWor"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 466, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 466] */ // Shortest string "gl_MaxComputeWork"
      new Table(46, 43, 18, new short[] {467, 18, 18, 18, 27, 27, 
          18, 18, 18, 18, 18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 
          18, 18, 18, 18, 27}),
/* NxS[ 467] */ // Shortest string "gl_MaxComputeWorkG"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 468, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 468] */ // Shortest string "gl_MaxComputeWorkGr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 469, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 469] */ // Shortest string "gl_MaxComputeWorkGro"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          470, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 470] */ // Shortest string "gl_MaxComputeWorkGrou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 471, 
          27}),
/* NxS[ 471] */ // Shortest string "gl_MaxComputeWorkGroup"
      new Table(50, 42, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 472, 102}),
/* NxS[ 472] */ // Shortest string "gl_MaxComputeWorkGroupC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 473, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 473] */ // Shortest string "gl_MaxComputeWorkGroupCo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          474, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 474] */ // Shortest string "gl_MaxComputeWorkGroupCou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 399, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 475] */ // Shortest string "gl_MaxCombi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 476, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 476] */ // Shortest string "gl_MaxCombin"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 477, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 477] */ // Shortest string "gl_MaxCombine"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 478, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 478] */ // Shortest string "gl_MaxCombined"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 246, 18, 18, 18, 18, 18, 18, 479, 18, 18, 364, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 479] */ // Shortest string "gl_MaxCombinedI"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 480, 18, 18, 18, 
          27}),
/* NxS[ 480] */ // Shortest string "gl_MaxCombinedIm"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 481, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 481] */ // Shortest string "gl_MaxCombinedIma"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 482, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 482] */ // Shortest string "gl_MaxCombinedImag"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 483, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 483] */ // Shortest string "gl_MaxCombinedImage"
      new Table(47, 42, 18, new short[] {484, 18, 18, 27, 27, 18, 
          18, 18, 18, 18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 
          18, 18, 18, 27}),
/* NxS[ 484] */ // Shortest string "gl_MaxCombinedImageU"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 485, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 485] */ // Shortest string "gl_MaxCombinedImageUn"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 486, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 486] */ // Shortest string "gl_MaxCombinedImageUni"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 487, 
          18, 305, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 487] */ // Shortest string "gl_MaxCombinedImageUnit"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 488, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 488] */ // Shortest string "gl_MaxCombinedImageUnits"
      new Table(50, 43, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 18, 18, 489}),
/* NxS[ 489] */ // Shortest string "gl_MaxCombinedImageUnitsA"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 490, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 490] */ // Shortest string "gl_MaxCombinedImageUnitsAn"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 491, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 491] */ // Shortest string "gl_MaxCombinedImageUnitsAnd"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 492, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 492] */ // Shortest string "gl_MaxCombinedImageUnitsAndF"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 493, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 493] */ // Shortest string "gl_MaxCombinedImageUnitsAndFr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 494, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 494] */ // Shortest string "gl_MaxCombinedImageUnitsAndFra"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 495, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 495] */ // Shortest string "gl_MaxCombinedImageUnitsAndFrag"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 496, 18, 18, 18, 
          27}),
/* NxS[ 496] */ // Shortest string "gl_MaxCombinedImageUnitsAndFragm"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 497, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 497] */ // Shortest string "gl_MaxCombinedImageUnitsAndFragme"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 498, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 498] */ // Shortest string "gl_MaxCombinedImageUnitsAndFragmen"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 499, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 499] */ // Shortest string "gl_MaxCombinedImageUnitsAndFragment"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 500, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 500] */ // Shortest string "gl_MaxCombinedImageUnitsAndFragmentO"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          501, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 501] */ // Shortest string "gl_MaxCombinedImageUnitsAndFragmentOu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 502, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 502] */ // Shortest string "gl_MaxCombinedImageUnitsAndFragmentOut"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 503, 
          27}),
/* NxS[ 503] */ // Shortest string "gl_MaxCombinedImageUnitsAndFragmentOutp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          265, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 504] */ // Shortest string "gl_MaxDr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 505, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 505] */ // Shortest string "gl_MaxDra"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 506, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 506] */ // Shortest string "gl_MaxDraw"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 325, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 507] */ // Shortest string "gl_Min"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 508, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 508] */ // Shortest string "gl_MinP"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 380, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 509] */ // Shortest string "gl_Sa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 510, 18, 18, 18, 
          27}),
/* NxS[ 510] */ // Shortest string "gl_Sam"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 511, 
          27}),
/* NxS[ 511] */ // Shortest string "gl_Samp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 512, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 512] */ // Shortest string "gl_Sampl"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 513, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 513] */ // Shortest string "gl_Sample"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 514, 18, 18, 92, 515, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 514] */ // Shortest string "gl_SampleM"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 517, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 515] */ // Shortest string "gl_SampleP"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 516, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 516] */ // Shortest string "gl_SamplePo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 189, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 517] */ // Shortest string "gl_SampleMa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 518, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 518] */ // Shortest string "gl_SampleMas"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 204, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 519] */ // Shortest string "gl_Cl"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 520, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 520] */ // Shortest string "gl_Cli"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 521, 
          27}),
/* NxS[ 521] */ // Shortest string "gl_Clip"
      new Table(50, 40, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 522}),
/* NxS[ 522] */ // Shortest string "gl_ClipD"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 523, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 523] */ // Shortest string "gl_ClipDi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 524, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 524] */ // Shortest string "gl_ClipDis"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 525, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 525] */ // Shortest string "gl_ClipDist"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 526, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 526] */ // Shortest string "gl_ClipDista"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 527, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 527] */ // Shortest string "gl_ClipDistan"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 104, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 528] */ // Shortest string "gl_De"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 529, 
          27}),
/* NxS[ 529] */ // Shortest string "gl_Dep"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 530, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 530] */ // Shortest string "gl_Dept"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 531, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 531] */ // Shortest string "gl_Depth"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 532, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 532] */ // Shortest string "gl_DepthR"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 533, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 533] */ // Shortest string "gl_DepthRa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 534, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 534] */ // Shortest string "gl_DepthRan"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 104, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 535] */ // Shortest string "gre"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 551, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 536] */ // Shortest string "gro"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          537, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 537] */ // Shortest string "grou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 538, 
          27}),
/* NxS[ 538] */ // Shortest string "group"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 539, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 539] */ // Shortest string "groupM"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 540, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 540] */ // Shortest string "groupMe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 541, 18, 18, 18, 
          27}),
/* NxS[ 541] */ // Shortest string "groupMem"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 542, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 542] */ // Shortest string "groupMemo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 543, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 543] */ // Shortest string "groupMemor"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 544, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 544] */ // Shortest string "groupMemory"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 545, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 545] */ // Shortest string "groupMemoryB"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 546, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 546] */ // Shortest string "ba"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 547, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 547] */ // Shortest string "bar"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 548, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 548] */ // Shortest string "barr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 549, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 549] */ // Shortest string "barri"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 550, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 550] */ // Shortest string "floo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 39, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 551] */ // Shortest string "grea"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 552, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 552] */ // Shortest string "great"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 553, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 553] */ // Shortest string "greate"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 554, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 554] */ // Shortest string "less"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 555, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 555] */ // Shortest string "lessT"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 556, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 556] */ // Shortest string "lessTh"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 557, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 557] */ // Shortest string "lessTha"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 558, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 558] */ // Shortest string "not"
      new Table(48, 41, 18, new short[] {559, 18, 27, 27, 18, 18, 
          18, 18, 18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 
          18, 18, 27}),
/* NxS[ 559] */ // Shortest string "notE"
      new Table(49, 40, 18, new short[] {560, 27, 27, 18, 18, 18, 
          18, 18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 
          18, 27}),
/* NxS[ 560] */ // Shortest string "eq"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          561, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 561] */ // Shortest string "equ"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 562, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 562] */ // Shortest string "al"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 39, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 563] */ // Shortest string "pr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 590, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 564] */ // Shortest string "po"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 39, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 565] */ // Shortest string "pa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 566, 567, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 566] */ // Shortest string "pac"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 570, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 567] */ // Shortest string "pat"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 568, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 568] */ // Shortest string "patc"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 569, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 569] */ // Shortest string "flat"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 570] */ // Shortest string "pack"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 571, 18, 572, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 572, 18, 18, 27, 27, 573, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 571] */ // Shortest string "packD"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 584, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 572] */ // Shortest string "packS"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 579, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 573] */ // Shortest string "packH"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 574, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 574] */ // Shortest string "packHa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 575, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 575] */ // Shortest string "packHal"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 576, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 576] */ // Shortest string "packHalf"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 577, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 577] */ // Shortest string "packHalf2"
      new Table(50, 48, -1, new short[] {27, 27, -1, -1, -1, -1, 
          -1, 27, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, -1, 29, 29, 29, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 27, 27, -1, 1131, -1, -1, 
          27, -1, -1, -1, -1, -1, -1, -1, -1, 29}),
/* NxS[ 578] */ new Table(0, 0, -1, null), // Shortest string "packSnorm4x8"
/* NxS[ 579] */ // Shortest string "packSn"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 580, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 580] */ // Shortest string "packSno"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 581, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 581] */ // Shortest string "packSnor"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 582, 18, 18, 18, 
          27}),
/* NxS[ 582] */ // Shortest string "packSnorm"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 577, 27, 583, 18, 18, 18, 18, 
          27}),
/* NxS[ 583] */ // Shortest string "packSnorm4"
      new Table(50, 48, -1, new short[] {27, 27, -1, -1, -1, -1, 
          -1, 27, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, -1, 29, 29, 29, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 27, 27, -1, 1133, -1, -1, 
          27, -1, -1, -1, -1, -1, -1, -1, -1, 29}),
/* NxS[ 584] */ // Shortest string "packDo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          585, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 585] */ // Shortest string "packDou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 586, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 586] */ // Shortest string "packDoub"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 587, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 587] */ // Shortest string "packDoubl"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 588, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 588] */ // Shortest string "packDouble"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 589, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 589] */ // Shortest string "packDouble2"
      new Table(50, 48, -1, new short[] {27, 27, -1, -1, -1, -1, 
          -1, 27, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, -1, 29, 29, 29, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 27, 27, -1, 1134, -1, -1, 
          27, -1, -1, -1, -1, -1, -1, -1, -1, 29}),
/* NxS[ 590] */ // Shortest string "pre"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 591, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 591] */ // Shortest string "prec"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 592, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 592] */ // Shortest string "preci"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 593, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 593] */ // Shortest string "precis"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 569, 18, 18, 594, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 594] */ // Shortest string "precisi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 595, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 595] */ // Shortest string "precisio"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 569, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 596] */ // Shortest string "me"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 615, 18, 18, 18, 18, 27, 27, 27, 616, 18, 18, 18, 
          27}),
/* NxS[ 597] */ // Shortest string "mi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 39, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 39, 18, 18, 
          27}),
/* NxS[ 598] */ // Shortest string "mo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 614, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 599] */ // Shortest string "ma"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 600, 18, 18, 18, 601, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 39, 18, 18, 
          27}),
/* NxS[ 600] */ // Shortest string "sig"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 39, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 601] */ // Shortest string "mat"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 602, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 603, 603, 603, 18, 18, 18, 18, 
          27}),
/* NxS[ 602] */ // Shortest string "matr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 605, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 603] */ // Shortest string "mat2"
      new Table(50, 48, -1, new short[] {27, 27, -1, -1, -1, -1, 
          -1, 27, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, -1, 29, 29, 29, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 27, 27, -1, 1136, -1, -1, 
          27, -1, -1, -1, -1, -1, -1, -1, -1, 29}),
/* NxS[ 604] */ new Table(0, 0, -1, null), // Shortest string "mat2x2"
/* NxS[ 605] */ // Shortest string "matri"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 606, 18, 18, 
          27}),
/* NxS[ 606] */ // Shortest string "matrix"
      new Table(50, 41, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 607}),
/* NxS[ 607] */ // Shortest string "matrixC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 608, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 608] */ // Shortest string "matrixCo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 609, 18, 18, 18, 
          27}),
/* NxS[ 609] */ // Shortest string "matrixCom"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 610, 
          27}),
/* NxS[ 610] */ // Shortest string "matrixComp"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 611, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 611] */ // Shortest string "matrixCompM"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          612, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 612] */ // Shortest string "matrixCompMu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 613, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 613] */ // Shortest string "sqr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 39, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 614] */ // Shortest string "mod"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 39, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 615] */ // Shortest string "med"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 648, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 616] */ // Shortest string "mem"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 617, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 617] */ // Shortest string "memo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 618, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 618] */ // Shortest string "memor"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 619, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 619] */ // Shortest string "memory"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 620, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 620] */ // Shortest string "memoryB"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 621, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 621] */ // Shortest string "memoryBa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 622, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 622] */ // Shortest string "memoryBar"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 623, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 623] */ // Shortest string "memoryBarr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 624, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 624] */ // Shortest string "memoryBarri"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 625, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 625] */ // Shortest string "memoryBarrie"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 626, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 626] */ // Shortest string "memoryBarrier"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 627, 628, 18, 18, 629, 18, 18, 18, 630, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 627] */ // Shortest string "memoryBarrierS"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 644, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 628] */ // Shortest string "memoryBarrierA"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 635, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 629] */ // Shortest string "memoryBarrierB"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          633, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 630] */ // Shortest string "memoryBarrierI"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 631, 18, 18, 18, 
          27}),
/* NxS[ 631] */ // Shortest string "memoryBarrierIm"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 632, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 632] */ // Shortest string "atomicExchan"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 54, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 633] */ // Shortest string "memoryBarrierBu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 634, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 634] */ // Shortest string "memoryBarrierBuf"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 549, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 635] */ // Shortest string "memoryBarrierAt"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 636, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 636] */ // Shortest string "memoryBarrierAto"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 637, 18, 18, 18, 
          27}),
/* NxS[ 637] */ // Shortest string "memoryBarrierAtom"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 638, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 638] */ // Shortest string "memoryBarrierAtomi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 639, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 639] */ // Shortest string "memoryBarrierAtomic"
      new Table(50, 41, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 640}),
/* NxS[ 640] */ // Shortest string "memoryBarrierAtomicC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 641, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 641] */ // Shortest string "memoryBarrierAtomicCo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          642, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 642] */ // Shortest string "memoryBarrierAtomicCou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 643, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 643] */ // Shortest string "memoryBarrierAtomicCoun"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 549, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 644] */ // Shortest string "memoryBarrierSh"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 645, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 645] */ // Shortest string "memoryBarrierSha"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 646, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 646] */ // Shortest string "imulExtend"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 647, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 647] */ // Shortest string "imageLoa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 39, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 648] */ // Shortest string "medi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          649, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 649] */ // Shortest string "mediu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 650, 18, 18, 18, 
          27}),
/* NxS[ 650] */ // Shortest string "low"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 651, 18, 
          27}),
/* NxS[ 651] */ // Shortest string "low_"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 652, 
          27}),
/* NxS[ 652] */ // Shortest string "low_p"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 653, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 653] */ // Shortest string "low_pr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 654, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 654] */ // Shortest string "low_pre"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 655, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 655] */ // Shortest string "low_prec"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 656, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 656] */ // Shortest string "low_preci"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 657, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 657] */ // Shortest string "low_precis"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 594, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 658] */ // Shortest string "iv"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 694, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 659] */ // Shortest string "br"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 691, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 660] */ // Shortest string "bi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 668, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 661] */ // Shortest string "bo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 666, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 662] */ // Shortest string "bu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 663, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 663] */ // Shortest string "buf"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 664, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 664] */ // Shortest string "buff"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 665, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 665] */ // Shortest string "buffe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 569, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 666] */ // Shortest string "boo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 667, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 667] */ // Shortest string "bool"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 668] */ // Shortest string "bit"
      new Table(50, 41, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 669, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 670}),
/* NxS[ 669] */ // Shortest string "bitf"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 673, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 670] */ // Shortest string "bitC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 671, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 671] */ // Shortest string "bitCo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          672, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 672] */ // Shortest string "bitCou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 613, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 673] */ // Shortest string "bitfi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 674, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 674] */ // Shortest string "bitfie"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 675, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 675] */ // Shortest string "bitfiel"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 676, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 676] */ // Shortest string "bitfield"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 677, 18, 18, 18, 18, 678, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 679, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 677] */ // Shortest string "bitfieldR"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 687, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 678] */ // Shortest string "bitfieldI"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 684, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 679] */ // Shortest string "bitfieldE"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 680, 18, 18, 
          27}),
/* NxS[ 680] */ // Shortest string "bitfieldEx"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 681, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 681] */ // Shortest string "bitfieldExt"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 682, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 682] */ // Shortest string "refr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 683, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 683] */ // Shortest string "fra"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 613, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 684] */ // Shortest string "bitfieldIn"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 685, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 685] */ // Shortest string "bitfieldIns"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 686, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 686] */ // Shortest string "sq"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 613, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 687] */ // Shortest string "bitfieldRe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 688, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 688] */ // Shortest string "bitfieldRev"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 689, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 689] */ // Shortest string "bitfieldReve"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 690, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 690] */ // Shortest string "transpo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 54, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 691] */ // Shortest string "bre"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 692, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 692] */ // Shortest string "brea"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 693, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 693] */ // Shortest string "if"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 694] */ // Shortest string "ive"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 695, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 695] */ // Shortest string "vec"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 696, 696, 696, 18, 18, 18, 18, 
          27}),
/* NxS[ 696] */ // Shortest string "vec2"
      new Table(50, 48, -1, new short[] {27, 27, -1, -1, -1, -1, 
          -1, 27, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, -1, 29, 29, 29, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 27, 27, -1, -1, -1, -1, 
          27, -1, -1, -1, -1, -1, -1, -1, -1, 29}),
/* NxS[ 697] */ // Shortest string "hi"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 698, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 698] */ // Shortest string "hig"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 650, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 699] */ // Shortest string "wr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 703, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 700] */ // Shortest string "wh"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 701, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 701] */ // Shortest string "whi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 702, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 702] */ // Shortest string "els"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 693, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 703] */ // Shortest string "wri"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 704, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 704] */ // Shortest string "writ"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 705, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 705] */ // Shortest string "read"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 706, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 706] */ // Shortest string "reado"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 707, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 707] */ // Shortest string "readon"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 708, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 708] */ // Shortest string "readonl"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 569, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 709] */ // Shortest string "de"
      new Table(50, 48, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 727, 
          18, 728, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 18, 18, 18, 18, 18, 18, 18, 729}),
/* NxS[ 710] */ // Shortest string "di"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 720, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 711] */ // Shortest string "do"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 39, 
          717, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 712] */ // Shortest string "dm"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 715, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 713] */ // Shortest string "dF"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 714, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 714] */ // Shortest string "dFd"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 39, 18, 
          18, 27, 18, 18, 18, 18, 39, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 715] */ // Shortest string "dma"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 716, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 716] */ // Shortest string "dmat"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 603, 603, 603, 18, 18, 18, 18, 
          27}),
/* NxS[ 717] */ // Shortest string "dou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 718, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 718] */ // Shortest string "doub"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 719, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 719] */ // Shortest string "doubl"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 667, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 720] */ // Shortest string "dis"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 721, 722, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 721] */ // Shortest string "disc"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 725, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 722] */ // Shortest string "dist"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 723, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 723] */ // Shortest string "dista"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 724, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 724] */ // Shortest string "distan"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 54, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 725] */ // Shortest string "disca"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 726, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 726] */ // Shortest string "voi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 693, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 727] */ // Shortest string "det"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 736, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 728] */ // Shortest string "def"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 733, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 729] */ // Shortest string "deg"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 730, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 730] */ // Shortest string "degr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 731, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 731] */ // Shortest string "degre"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 732, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 732] */ // Shortest string "ab"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 39, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 733] */ // Shortest string "defa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          734, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 734] */ // Shortest string "defau"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 735, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 735] */ // Shortest string "struc"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 693, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 736] */ // Shortest string "dete"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 737, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 737] */ // Shortest string "deter"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 738, 18, 18, 18, 
          27}),
/* NxS[ 738] */ // Shortest string "determ"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 739, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 739] */ // Shortest string "determi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 740, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 740] */ // Shortest string "determin"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 672, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 741] */ // Shortest string "le"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 752, 18, 18, 753, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 742] */ // Shortest string "lo"
      new Table(15, 48, 18, new short[] {650, 18, 18, 18, 27, 27, 
          27, 18, 18, 18, 18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 750, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 
          18, 18, 18, 18, 27, 29, -1, -1, -1, -1}),
/* NxS[ 743] */ // Shortest string "la"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 747, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 744] */ // Shortest string "ld"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 745, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 745] */ // Shortest string "fre"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 746, 18, 18, 
          27}),
/* NxS[ 746] */ // Shortest string "ste"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 39, 
          27}),
/* NxS[ 747] */ // Shortest string "lay"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 748, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 748] */ // Shortest string "ino"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          749, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 749] */ // Shortest string "fla"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 569, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 750] */ // Shortest string "exp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 751, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 751] */ // Shortest string "exp2"
      new Table(50, 48, -1, new short[] {27, 27, -1, -1, -1, -1, 
          -1, 27, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, -1, 29, 29, 29, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 27, 27, -1, -1, -1, -1, 
          27, -1, -1, -1, -1, -1, -1, -1, -1, 29}),
/* NxS[ 752] */ // Shortest string "les"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 554, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 753] */ // Shortest string "len"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 754, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 754] */ // Shortest string "fwid"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 755, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 755] */ // Shortest string "fwidt"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 39, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 756] */ // Shortest string "as"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 761, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 757] */ // Shortest string "an"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 39, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 758] */ // Shortest string "ac"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 796, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 759] */ // Shortest string "at"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 760, 18, 18, 18, 
          18, 18, 761, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 760] */ // Shortest string "ato"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 763, 18, 18, 18, 
          27}),
/* NxS[ 761] */ // Shortest string "ta"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 762, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 762] */ // Shortest string "sin"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 39, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 763] */ // Shortest string "atom"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 764, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 764] */ // Shortest string "atomi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 765, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 765] */ // Shortest string "atomic"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 766, 
          18, 27, 18, 767, 18, 768, 18, 18, 18, 769, 18, 18, 18, 18, 18, 18, 
          18, 550, 18, 18, 18, 18, 18, 770, 18, 27, 27, 18, 18, 18, 771, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 766] */ // Shortest string "atomic_"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          793, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 767] */ // Shortest string "atomicC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 776, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 768] */ // Shortest string "atomicA"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 647, 18, 18, 
          18, 18, 18, 18, 647, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 769] */ // Shortest string "atomicM"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 600, 18, 18, 18, 18, 
          18, 18, 38, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 770] */ // Shortest string "atomicE"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 772, 18, 18, 
          27}),
/* NxS[ 771] */ // Shortest string "atomicX"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 550, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 772] */ // Shortest string "atomicEx"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 773, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 773] */ // Shortest string "atomicExc"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 774, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 774] */ // Shortest string "atomicExch"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 775, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 775] */ // Shortest string "atomicExcha"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 632, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 776] */ // Shortest string "atomicCo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          777, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 778, 18, 18, 18, 
          27}),
/* NxS[ 777] */ // Shortest string "atomicCou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 782, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 778] */ // Shortest string "atomicCom"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 779, 
          27}),
/* NxS[ 779] */ // Shortest string "atomicComp"
      new Table(50, 42, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 18, 780}),
/* NxS[ 780] */ // Shortest string "atomicCompS"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 781, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 781] */ // Shortest string "atomicCompSw"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 746, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 782] */ // Shortest string "atomicCoun"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 783, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 783] */ // Shortest string "atomicCount"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 784, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 784] */ // Shortest string "atomicCounte"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 785, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 785] */ // Shortest string "atomicCounter"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 786, 18, 18, 18, 18, 18, 18, 18, 18, 18, 787, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 786] */ // Shortest string "atomicCounterD"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 788, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 787] */ // Shortest string "atomicCounterI"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 788, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 788] */ // Shortest string "atomicCounterDe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 789, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 789] */ // Shortest string "atomicCounterDec"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 790, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 790] */ // Shortest string "atomicCounterDecr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 791, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 791] */ // Shortest string "atomicCounterDecre"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 792, 18, 18, 18, 
          27}),
/* NxS[ 792] */ // Shortest string "atomicCounterDecrem"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 672, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 793] */ // Shortest string "atomic_u"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 794, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 794] */ // Shortest string "atomic_ui"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 795, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 795] */ // Shortest string "atomic_uin"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 667, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 796] */ // Shortest string "aco"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 762, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 797] */ // Shortest string "fr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 745, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 683, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 798] */ // Shortest string "fi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 823, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 799] */ // Shortest string "fo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 693, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 800] */ // Shortest string "fa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 815, 18, 
          18, 18, 18, 816, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 801] */ // Shortest string "fl"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 805, 18, 18, 18, 
          18, 18, 749, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 802] */ // Shortest string "fw"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 804, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 803] */ // Shortest string "fm"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 39, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 804] */ // Shortest string "fwi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 754, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 805] */ // Shortest string "flo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 550, 18, 18, 18, 
          18, 18, 806, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 806] */ // Shortest string "floa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 807, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 807] */ // Shortest string "float"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 808, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 808] */ // Shortest string "floatB"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 809, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 809] */ // Shortest string "floatBi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 810, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 810] */ // Shortest string "floatBit"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 811, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 811] */ // Shortest string "floatBits"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 812, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 812] */ // Shortest string "floatBitsT"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 813, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 813] */ // Shortest string "floatBitsTo"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 672, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 814, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 814] */ // Shortest string "floatBitsToU"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 672, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 815] */ // Shortest string "fac"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 817, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 816] */ // Shortest string "el"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 702, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 817] */ // Shortest string "face"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 818, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 818] */ // Shortest string "facef"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 819, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 819] */ // Shortest string "facefo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 820, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 820] */ // Shortest string "facefor"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 821, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 821] */ // Shortest string "faceforw"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 822, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 822] */ // Shortest string "faceforwa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 647, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 823] */ // Shortest string "fin"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 824, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 824] */ // Shortest string "find"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 825, 18, 18, 18, 18, 18, 18, 
          825, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 825] */ // Shortest string "findM"
      new Table(50, 42, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 18, 826}),
/* NxS[ 826] */ // Shortest string "findMS"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 39, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 827] */ // Shortest string "us"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          883, 18, 884, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 828] */ // Shortest string "ui"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 850, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 851, 18, 18, 18, 
          27}),
/* NxS[ 829] */ // Shortest string "un"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 844, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 845, 
          27}),
/* NxS[ 830] */ // Shortest string "ua"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 839, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 831] */ // Shortest string "um"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          832, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 832] */ // Shortest string "imu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 833, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 833] */ // Shortest string "imul"
      new Table(48, 41, 18, new short[] {834, 18, 27, 27, 18, 18, 
          18, 18, 18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 
          18, 18, 27}),
/* NxS[ 834] */ // Shortest string "imulE"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 835, 18, 18, 
          27}),
/* NxS[ 835] */ // Shortest string "imulEx"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 836, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 836] */ // Shortest string "imulExt"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 837, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 837] */ // Shortest string "imulExte"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 838, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 838] */ // Shortest string "imulExten"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 646, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 839] */ // Shortest string "uad"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 840, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 840] */ // Shortest string "uadd"
      new Table(50, 41, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 841}),
/* NxS[ 841] */ // Shortest string "uaddC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 842, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 842] */ // Shortest string "uaddCa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 843, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 843] */ // Shortest string "uaddCar"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 757, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 844] */ // Shortest string "uni"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 847, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 845] */ // Shortest string "unp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 846, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 846] */ // Shortest string "unpa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 566, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 847] */ // Shortest string "unif"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 848, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 848] */ // Shortest string "unifo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 849, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 849] */ // Shortest string "unifor"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 569, 18, 18, 18, 
          27}),
/* NxS[ 850] */ // Shortest string "uin"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 873, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 851] */ // Shortest string "iim"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 852, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 852] */ // Shortest string "iima"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 853, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 853] */ // Shortest string "iimag"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 854, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 854] */ // Shortest string "iimage"
      new Table(19, 44, 18, new short[] {855, 856, 27, 18, 18, 18, 
          18, 857, 18, 858, 18, 18, 18, 18, 859, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 855] */ // Shortest string "image2"
      new Table(50, 48, -1, new short[] {27, 27, -1, -1, -1, -1, 
          -1, 27, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, -1, 29, 29, 29, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 27, 27, -1, -1, -1, -1, 
          27, 872, -1, -1, -1, -1, -1, -1, -1, 29}),
/* NxS[ 856] */ // Shortest string "image3"
      new Table(50, 48, -1, new short[] {27, 27, -1, -1, -1, -1, 
          -1, 27, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, -1, 29, 29, 29, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 27, 27, -1, -1, -1, -1, 
          27, 604, -1, -1, -1, -1, -1, -1, -1, 29}),
/* NxS[ 857] */ // Shortest string "image1"
      new Table(50, 48, -1, new short[] {27, 27, -1, -1, -1, -1, 
          -1, 27, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, -1, 29, 29, 29, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 27, 27, -1, -1, -1, -1, 
          27, 871, -1, -1, -1, -1, -1, -1, -1, 29}),
/* NxS[ 858] */ // Shortest string "imageC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          864, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 859] */ // Shortest string "imageB"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          860, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 860] */ // Shortest string "imageBu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 861, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 861] */ // Shortest string "imageBuf"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 862, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 862] */ // Shortest string "imageBuff"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 863, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 863] */ // Shortest string "imageBuffe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 667, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 864] */ // Shortest string "imageCu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 865, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 865] */ // Shortest string "imageCub"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 866, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 866] */ // Shortest string "imageCube"
      new Table(50, 43, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 18, 18, 867}),
/* NxS[ 867] */ // Shortest string "imageCubeA"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 868, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 868] */ // Shortest string "imageCubeAr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 869, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 869] */ // Shortest string "imageCubeArr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 870, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 870] */ // Shortest string "imageCubeArra"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 667, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 871] */ // Shortest string "image1D"
      new Table(30, 1, -1, new short[] {1137}),
/* NxS[ 872] */ // Shortest string "image2D"
      new Table(30, 5, -1, new short[] {1137, -1, 1141, -1, 1142}),
/* NxS[ 873] */ // Shortest string "uint"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 874, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 874] */ // Shortest string "intB"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 875, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 875] */ // Shortest string "intBi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 876, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 876] */ // Shortest string "intBit"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 877, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 877] */ // Shortest string "intBits"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 878, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 878] */ // Shortest string "intBitsT"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 879, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 879] */ // Shortest string "intBitsTo"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 880, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 880] */ // Shortest string "intBitsToF"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 881, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 881] */ // Shortest string "intBitsToFl"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 882, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 882] */ // Shortest string "intBitsToFlo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 613, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 883] */ // Shortest string "usu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 889, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 884] */ // Shortest string "isa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 885, 18, 18, 18, 
          27}),
/* NxS[ 885] */ // Shortest string "isam"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 886, 
          27}),
/* NxS[ 886] */ // Shortest string "isamp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 887, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 887] */ // Shortest string "isampl"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 888, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 888] */ // Shortest string "isample"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 854, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 889] */ // Shortest string "usub"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 890, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 890] */ // Shortest string "usubB"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 891, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 891] */ // Shortest string "usubBo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 892, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 892] */ // Shortest string "usubBor"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 893, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 893] */ // Shortest string "usubBorr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 564, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 894] */ // Shortest string "te"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 902, 18, 18, 
          27}),
/* NxS[ 895] */ // Shortest string "tr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          896, 18, 897, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 896] */ // Shortest string "tru"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 693, 18, 18, 18, 18, 901, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 897] */ // Shortest string "tra"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 898, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 898] */ // Shortest string "tran"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 899, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 899] */ // Shortest string "trans"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 900, 
          27}),
/* NxS[ 900] */ // Shortest string "transp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 690, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 901] */ // Shortest string "trun"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 39, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 902] */ // Shortest string "tex"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 903, 18, 18, 18, 18, 18, 18, 904, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 903] */ // Shortest string "texe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 944, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 904] */ // Shortest string "text"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          905, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 905] */ // Shortest string "textu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 906, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 906] */ // Shortest string "textur"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 907, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 907] */ // Shortest string "texture"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 908, 18, 18, 18, 18, 18, 18, 18, 18, 909, 18, 18, 
          910, 935, 18, 18, 18, 911, 18, 18, 18, 27, 27, 18, 912, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 908] */ // Shortest string "normal"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 943, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 909] */ // Shortest string "textureP"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 939, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 910] */ // Shortest string "textureL"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 933, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 911] */ // Shortest string "textureG"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 921, 18, 18, 18, 18, 18, 18, 
          18, 18, 922, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 912] */ // Shortest string "textureQ"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          913, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 913] */ // Shortest string "textureQu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 914, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 914] */ // Shortest string "textureQue"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 915, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 915] */ // Shortest string "textureQuer"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 916, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 916] */ // Shortest string "textureQuery"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          917, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 917] */ // Shortest string "textureQueryL"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 918, 18, 18, 18, 647, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 918] */ // Shortest string "textureQueryLe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 919, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 919] */ // Shortest string "textureQueryLev"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 920, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 920] */ // Shortest string "textureQueryLeve"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 732, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 921] */ // Shortest string "textureGr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 933, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 922] */ // Shortest string "textureGa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 923, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 923] */ // Shortest string "textureGat"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 924, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 924] */ // Shortest string "textureGath"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 925, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 925] */ // Shortest string "textureGathe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 926, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 926] */ // Shortest string "textureGather"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 927, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 927] */ // Shortest string "textureGatherO"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 928, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 928] */ // Shortest string "textureGatherOf"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 929, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 929] */ // Shortest string "textureGatherOff"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 930, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 930] */ // Shortest string "textureGatherOffs"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 931, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 931] */ // Shortest string "textureGatherOffse"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 932, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 932] */ // Shortest string "textureGatherOffset"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 39, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 933] */ // Shortest string "textureLo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 934, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 934] */ // Shortest string "texelFetch"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 935, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 935] */ // Shortest string "textureO"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 936, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 936] */ // Shortest string "textureOf"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 937, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 937] */ // Shortest string "textureOff"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 938, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 938] */ // Shortest string "textureOffs"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 613, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 939] */ // Shortest string "texturePr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 940, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 940] */ // Shortest string "texturePro"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 941, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 941] */ // Shortest string "textureProj"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          910, 935, 18, 18, 18, 942, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 942] */ // Shortest string "textureProjG"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 921, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 943] */ // Shortest string "imageSi"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 54, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 944] */ // Shortest string "texel"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 945, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 945] */ // Shortest string "texelF"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 946, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 946] */ // Shortest string "texelFe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 947, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 947] */ // Shortest string "texelFet"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 948, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 948] */ // Shortest string "texelFetc"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 934, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 949] */ // Shortest string "ce"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 562, 18, 963, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 950] */ // Shortest string "cr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 962, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 951] */ // Shortest string "co"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 702, 762, 18, 18, 954, 18, 18, 
          18, 18, 18, 18, 18, 18, 955, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 952] */ // Shortest string "cl"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 953, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 953] */ // Shortest string "cla"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 746, 18, 18, 18, 
          27}),
/* NxS[ 954] */ // Shortest string "con"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 749, 18, 18, 18, 18, 959, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 955] */ // Shortest string "coh"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 956, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 956] */ // Shortest string "cohe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 957, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 957] */ // Shortest string "coher"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 958, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 958] */ // Shortest string "cohere"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 749, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 959] */ // Shortest string "cont"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 960, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 960] */ // Shortest string "conti"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 961, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 961] */ // Shortest string "contin"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          702, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 962] */ // Shortest string "cro"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 732, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 963] */ // Shortest string "cen"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 964, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 964] */ // Shortest string "cent"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 965, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 965] */ // Shortest string "centr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 966, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 966] */ // Shortest string "centro"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 967, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 967] */ // Shortest string "share"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 569, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 968] */ // Shortest string "no"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 969, 18, 970, 18, 18, 18, 558, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 971, 
          27}),
/* NxS[ 969] */ // Shortest string "nor"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 983, 18, 18, 18, 
          27}),
/* NxS[ 970] */ // Shortest string "noi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 981, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 971] */ // Shortest string "nop"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 972, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 972] */ // Shortest string "nope"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 973, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 973] */ // Shortest string "noper"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 974, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 974] */ // Shortest string "nopers"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 975, 
          27}),
/* NxS[ 975] */ // Shortest string "nopersp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 976, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 976] */ // Shortest string "noperspe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 977, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 977] */ // Shortest string "noperspec"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 978, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 978] */ // Shortest string "noperspect"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 979, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 979] */ // Shortest string "noperspecti"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 980, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 980] */ // Shortest string "volatil"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 569, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 981] */ // Shortest string "nois"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 982, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 982] */ // Shortest string "noise"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 751, 751, 751, 18, 18, 18, 18, 
          751}),
/* NxS[ 983] */ // Shortest string "norm"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 984, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 984] */ // Shortest string "norma"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 908, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 985] */ // Shortest string "ou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 986, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 986] */ // Shortest string "out"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 987, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 987] */ // Shortest string "oute"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 988, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 988] */ // Shortest string "outer"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 989, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 989] */ // Shortest string "outerP"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 990, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 990] */ // Shortest string "outerPr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 991, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 991] */ // Shortest string "outerPro"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 992, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 992] */ // Shortest string "outerProd"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          683, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 993] */ // Shortest string "is"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 1043, 18, 1044, 18, 18, 
          18, 18, 884, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 994] */ // Shortest string "ii"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 851, 18, 18, 18, 
          27}),
/* NxS[ 995] */ // Shortest string "in"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 1013, 18, 18, 18, 18, 748, 18, 18, 1014, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 996] */ // Shortest string "im"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          832, 18, 997, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 997] */ // Shortest string "ima"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 18, 18, 998, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[ 998] */ // Shortest string "imag"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 999, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[ 999] */ // Shortest string "image"
      new Table(19, 44, 18, new short[] {855, 856, 27, 18, 18, 18, 
          18, 857, 18, 858, 1000, 1001, 18, 18, 859, 18, 18, 18, 18, 18, 18, 18, 
          1002, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[1000] */ // Shortest string "imageS"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 943, 18, 18, 18, 1011, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1001] */ // Shortest string "imageA"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 1004, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1002] */ // Shortest string "imageL"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 1003, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1003] */ // Shortest string "imageLo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 647, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1004] */ // Shortest string "imageAt"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 1005, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1005] */ // Shortest string "imageAto"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 1006, 18, 18, 18, 
          27}),
/* NxS[1006] */ // Shortest string "imageAtom"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 1007, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1007] */ // Shortest string "imageAtomi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 1008, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1008] */ // Shortest string "imageAtomic"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 1009, 18, 768, 18, 18, 18, 769, 18, 18, 18, 18, 18, 18, 
          18, 550, 18, 18, 18, 18, 18, 770, 18, 27, 27, 18, 18, 18, 771, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[1009] */ // Shortest string "imageAtomicC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 1010, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1010] */ // Shortest string "imageAtomicCo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 778, 18, 18, 18, 
          27}),
/* NxS[1011] */ // Shortest string "imageSt"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 1012, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1012] */ // Shortest string "imageSto"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 54, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1013] */ // Shortest string "inv"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 1035, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 1036, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1014] */ // Shortest string "int"
      new Table(19, 46, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 18, 18, 874, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1, 18, 1015}),
/* NxS[1015] */ // Shortest string "inte"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 1016, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1016] */ // Shortest string "inter"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 1017, 
          27}),
/* NxS[1017] */ // Shortest string "interp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 1018, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1018] */ // Shortest string "interpo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 1019, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1019] */ // Shortest string "interpol"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 1020, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1020] */ // Shortest string "interpola"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 1021, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1021] */ // Shortest string "interpolat"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 1022, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1022] */ // Shortest string "interpolate"
      new Table(50, 43, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 18, 18, 1023}),
/* NxS[1023] */ // Shortest string "interpolateA"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 1024, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1024] */ // Shortest string "interpolateAt"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 1025, 1026, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 935, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[1025] */ // Shortest string "interpolateAtC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 1030, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1026] */ // Shortest string "interpolateAtS"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 1027, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1027] */ // Shortest string "interpolateAtSa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 1028, 18, 18, 18, 
          27}),
/* NxS[1028] */ // Shortest string "interpolateAtSam"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 1029, 
          27}),
/* NxS[1029] */ // Shortest string "interpolateAtSamp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 54, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1030] */ // Shortest string "interpolateAtCe"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 1031, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1031] */ // Shortest string "interpolateAtCen"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 1032, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1032] */ // Shortest string "interpolateAtCent"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 1033, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1033] */ // Shortest string "interpolateAtCentr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 1034, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1034] */ // Shortest string "interpolateAtCentro"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 647, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1035] */ // Shortest string "inve"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 1039, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1036] */ // Shortest string "inva"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 1037, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1037] */ // Shortest string "invar"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 1038, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1038] */ // Shortest string "invari"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 958, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1039] */ // Shortest string "inver"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 1040, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1040] */ // Shortest string "invers"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 1041, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1041] */ // Shortest string "inverse"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 1042, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1042] */ // Shortest string "inverses"
      new Table(49, 40, 18, new short[] {686, 27, 27, 18, 18, 18, 
          18, 18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 
          18, 27}),
/* NxS[1043] */ // Shortest string "isi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 1045, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1044] */ // Shortest string "isn"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 600, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1045] */ // Shortest string "isin"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 39, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1046] */ // Shortest string "si"
      new Table(50, 48, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 762, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 18, 18, 18, 18, 18, 18, 18, 600}),
/* NxS[1047] */ // Shortest string "st"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 746, 1094, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1048] */ // Shortest string "su"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 1088, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1049] */ // Shortest string "sa"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 1064, 18, 18, 18, 
          27}),
/* NxS[1050] */ // Shortest string "sw"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 1061, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1051] */ // Shortest string "sh"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 1059, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1052] */ // Shortest string "sm"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 1053, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1053] */ // Shortest string "smo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 1054, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1054] */ // Shortest string "smoo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 1055, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1055] */ // Shortest string "smoot"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 1056, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1056] */ // Shortest string "smooth"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 1057, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1057] */ // Shortest string "smooths"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 1058, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1058] */ // Shortest string "smoothst"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 746, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1059] */ // Shortest string "sha"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 1060, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1060] */ // Shortest string "shar"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 967, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1061] */ // Shortest string "swi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 1062, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1062] */ // Shortest string "swit"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 1063, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1063] */ // Shortest string "switc"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 693, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1064] */ // Shortest string "sam"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 1065, 
          27}),
/* NxS[1065] */ // Shortest string "samp"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 1066, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1066] */ // Shortest string "sampl"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 1067, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1067] */ // Shortest string "sample"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 1068, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1068] */ // Shortest string "sampler"
      new Table(19, 44, 18, new short[] {1069, 856, 27, 18, 18, 18, 
          18, 1070, 18, 1071, 18, 18, 18, 18, 859, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[1069] */ // Shortest string "sampler2"
      new Table(50, 48, -1, new short[] {27, 27, -1, -1, -1, -1, 
          -1, 27, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, -1, 29, 29, 29, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 27, 27, -1, -1, -1, -1, 
          27, 1087, -1, -1, -1, -1, -1, -1, -1, 29}),
/* NxS[1070] */ // Shortest string "sampler1"
      new Table(50, 48, -1, new short[] {27, 27, -1, -1, -1, -1, 
          -1, 27, 29, -1, -1, -1, -1, -1, -1, 29, 29, 29, -1, 29, 29, 29, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 27, 27, -1, -1, -1, -1, 
          27, 1085, -1, -1, -1, -1, -1, -1, -1, 29}),
/* NxS[1071] */ // Shortest string "samplerC"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          1072, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1072] */ // Shortest string "samplerCu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 1073, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1073] */ // Shortest string "samplerCub"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 1074, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1074] */ // Shortest string "samplerCube"
      new Table(50, 43, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 18, 1080, 1075}),
/* NxS[1075] */ // Shortest string "samplerCubeA"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 1076, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1076] */ // Shortest string "samplerCubeAr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 1077, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1077] */ // Shortest string "samplerCubeArr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 1078, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1078] */ // Shortest string "samplerCubeArra"
      new Table(19, 44, 18, new short[] {27, 27, 27, 18, 18, 18, 
          18, 27, 18, 18, 18, 18, 1079, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 18, 18, 18, 18, 18, 
          27, 29, -1, -1, -1, -1}),
/* NxS[1079] */ // Shortest string "samplerCubeArray"
      new Table(50, 42, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27, 18, 18, 1080}),
/* NxS[1080] */ // Shortest string "samplerCubeS"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 1081, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1081] */ // Shortest string "samplerCubeSh"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 1082, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1082] */ // Shortest string "samplerCubeSha"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 1083, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1083] */ // Shortest string "samplerCubeShad"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 1084, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1084] */ // Shortest string "samplerCubeShado"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 667, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1085] */ // Shortest string "sampler1D"
      new Table(29, 2, -1, new short[] {1149, 1145}),
/* NxS[1086] */ // Shortest string "sampler2DRect"
      new Table(29, 1, -1, new short[] {1149}),
/* NxS[1087] */ // Shortest string "sampler2D"
      new Table(29, 6, -1, new short[] {1149, 1145, -1, 1154, -1, 1142}),
/* NxS[1088] */ // Shortest string "sub"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 1089, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1089] */ // Shortest string "subr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 1090, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1090] */ // Shortest string "subro"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          1091, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1091] */ // Shortest string "subrou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 1092, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1092] */ // Shortest string "subrout"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 1093, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1093] */ // Shortest string "subrouti"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 980, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1094] */ // Shortest string "str"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          1095, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1095] */ // Shortest string "stru"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 735, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1096] */ // Shortest string "re"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 1107, 18, 18, 18, 18, 1108, 
          18, 1109, 1110, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1097] */ // Shortest string "ro"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          1102, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1098] */ // Shortest string "ra"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 1099, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1099] */ // Shortest string "rad"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 1100, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1100] */ // Shortest string "radi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 1101, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1101] */ // Shortest string "radia"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 732, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1102] */ // Shortest string "rou"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 1103, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1103] */ // Shortest string "roun"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 1104, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1104] */ // Shortest string "round"
      new Table(48, 41, 18, new short[] {1105, 18, 27, 27, 18, 18, 
          18, 18, 18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 
          18, 18, 27}),
/* NxS[1105] */ // Shortest string "roundE"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 1106, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1106] */ // Shortest string "roundEv"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 600, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1107] */ // Shortest string "res"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 1114, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1108] */ // Shortest string "ret"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          1112, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1109] */ // Shortest string "ref"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 682, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 1111, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1110] */ // Shortest string "rea"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 705, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1111] */ // Shortest string "refl"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 683, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1112] */ // Shortest string "retu"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 1113, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1113] */ // Shortest string "retur"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 693, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1114] */ // Shortest string "rest"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 1115, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1115] */ // Shortest string "restr"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 1116, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1116] */ // Shortest string "restri"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 749, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1117] */ // Shortest string "ex"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 750, 
          27}),
/* NxS[1118] */ // Shortest string "ve"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 1124, 18, 18, 18, 18, 695, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1119] */ // Shortest string "vo"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 726, 18, 18, 18, 18, 
          18, 18, 18, 1120, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1120] */ // Shortest string "vol"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 1121, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1121] */ // Shortest string "vola"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 1122, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1122] */ // Shortest string "volat"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 1123, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1123] */ // Shortest string "volati"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
          18, 18, 18, 980, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1124] */ // Shortest string "ver"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 1125, 18, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1125] */ // Shortest string "vers"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 1126, 18, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1126] */ // Shortest string "versi"
      new Table(50, 39, 18, new short[] {27, 27, 18, 18, 18, 18, 
          18, 27, 29, -1, -1, -1, -1, 18, 18, 18, 18, 18, 1113, 18, 18, 18, 
          18, 18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 18, 18, 18, 18, 
          27}),
/* NxS[1127] */ // Shortest string ""
      new Table(48, 50, 18, new short[] {23, 18, 19, 19, 18, 18, 
          18, 18, 18, 19, -1, 1128, -1, -1, -1, 1, 2, 3, 4, 5, 6, 7, 
          8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 20, 18, 
          18, 21, 19, 18, 18, 18, 18, 18, 18, 18, 18, 22}),
/* NxS[1128] */ // Shortest string "/"
      new Table(59, 2, -1, new short[] {24, 1129}),
/* NxS[1129] */ // Shortest string "/*"
      new Table(60, 1, 1129, new short[] {1130}),
/* NxS[1130] */ // Shortest string "/**"
      new Table(59, 2, 1129, new short[] {25, 1130}),
/* NxS[1131] */ // Shortest string "packHalf2x"
      new Table(26, 1, -1, new short[] {1132}),
/* NxS[1132] */ // Shortest string "packHalf2x1"
      new Table(50, 1, -1, new short[] {578}),
/* NxS[1133] */ // Shortest string "packSnorm4x"
      new Table(51, 1, -1, new short[] {578}),
/* NxS[1134] */ // Shortest string "packDouble2x"
      new Table(20, 1, -1, new short[] {1135}),
/* NxS[1135] */ // Shortest string "packDouble2x3"
      new Table(19, 1, -1, new short[] {578}),
/* NxS[1136] */ // Shortest string "mat2x"
      new Table(19, 3, -1, new short[] {604, 604, 604}),
/* NxS[1137] */ // Shortest string "image2DA"
      new Table(3, 1, -1, new short[] {1138}),
/* NxS[1138] */ // Shortest string "image2DAr"
      new Table(3, 1, -1, new short[] {1139}),
/* NxS[1139] */ // Shortest string "image2DArr"
      new Table(12, 1, -1, new short[] {1140}),
/* NxS[1140] */ // Shortest string "image2DArra"
      new Table(31, 1, -1, new short[] {604}),
/* NxS[1141] */ // Shortest string "image2DR"
      new Table(2, 1, -1, new short[] {1143}),
/* NxS[1142] */ // Shortest string "image2DM"
      new Table(29, 1, -1, new short[] {871}),
/* NxS[1143] */ // Shortest string "image2DRe"
      new Table(8, 1, -1, new short[] {1144}),
/* NxS[1144] */ // Shortest string "image2DRec"
      new Table(9, 1, -1, new short[] {604}),
/* NxS[1145] */ // Shortest string "sampler2DA"
      new Table(3, 1, -1, new short[] {1146}),
/* NxS[1146] */ // Shortest string "sampler2DAr"
      new Table(3, 1, -1, new short[] {1147}),
/* NxS[1147] */ // Shortest string "sampler2DArr"
      new Table(12, 1, -1, new short[] {1148}),
/* NxS[1148] */ // Shortest string "sampler2DArra"
      new Table(31, 1, -1, new short[] {1086}),
/* NxS[1149] */ // Shortest string "sampler2DS"
      new Table(16, 1, -1, new short[] {1150}),
/* NxS[1150] */ // Shortest string "sampler2DSh"
      new Table(12, 1, -1, new short[] {1151}),
/* NxS[1151] */ // Shortest string "sampler2DSha"
      new Table(14, 1, -1, new short[] {1152}),
/* NxS[1152] */ // Shortest string "sampler2DShad"
      new Table(6, 1, -1, new short[] {1153}),
/* NxS[1153] */ // Shortest string "sampler2DShado"
      new Table(15, 1, -1, new short[] {604}),
/* NxS[1154] */ // Shortest string "sampler2DR"
      new Table(2, 1, -1, new short[] {1155}),
/* NxS[1155] */ // Shortest string "sampler2DRe"
      new Table(8, 1, -1, new short[] {1156}),
/* NxS[1156] */ // Shortest string "sampler2DRec"
      new Table(9, 1, -1, new short[] {1086}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = MapC(code) - NxS[state].min;
            if (idx < 0) idx += 62;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     public Scanner(Stream file) {
            SetSource(file, -1); // unicode option
        }

        public Scanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     public Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
                for (; ; ) {
                    int next;              // next state to enter
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '{identifier}',	Shortest string "v"
        case 2: // Recognized '{identifier}',	Shortest string "e"
        case 3: // Recognized '{identifier}',	Shortest string "r"
        case 4: // Recognized '{identifier}',	Shortest string "s"
        case 5: // Recognized '{identifier}',	Shortest string "i"
        case 6: // Recognized '{identifier}',	Shortest string "o"
        case 7: // Recognized '{identifier}',	Shortest string "n"
        case 8: // Recognized '{identifier}',	Shortest string "c"
        case 9: // Recognized '{identifier}',	Shortest string "t"
        case 10: // Recognized '{identifier}',	Shortest string "u"
        case 11: // Recognized '{identifier}',	Shortest string "f"
        case 12: // Recognized '{identifier}',	Shortest string "a"
        case 13: // Recognized '{identifier}',	Shortest string "l"
        case 14: // Recognized '{identifier}',	Shortest string "d"
        case 15: // Recognized '{identifier}',	Shortest string "w"
        case 16: // Recognized '{identifier}',	Shortest string "h"
        case 17: // Recognized '{identifier}',	Shortest string "b"
        case 18: // Recognized '{identifier}',	Shortest string "k"
        case 20: // Recognized '{identifier}',	Shortest string "m"
        case 21: // Recognized '{identifier}',	Shortest string "p"
        case 22: // Recognized '{identifier}',	Shortest string "g"
        case 23: // Recognized '{identifier}',	Shortest string "E"
        case 26: // Recognized '{identifier}',	Shortest string "En"
        case 27: // Recognized '{identifier}',	Shortest string "v2"
        case 28: // Recognized '{identifier}',	Shortest string "Em"
        case 29: // Recognized '{identifier}',	Shortest string "v@"
        case 30: // Recognized '{identifier}',	Shortest string "v@2"
        case 31: // Recognized '{identifier}',	Shortest string "Emi"
        case 32: // Recognized '{identifier}',	Shortest string "Emit"
        case 33: // Recognized '{identifier}',	Shortest string "EmitS"
        case 34: // Recognized '{identifier}',	Shortest string "EmitV"
        case 35: // Recognized '{identifier}',	Shortest string "EmitVe"
        case 36: // Recognized '{identifier}',	Shortest string "EmitVer"
        case 37: // Recognized '{identifier}',	Shortest string "EmitVert"
        case 38: // Recognized '{identifier}',	Shortest string "atomicMa"
        case 40: // Recognized '{identifier}',	Shortest string "EmitSt"
        case 41: // Recognized '{identifier}',	Shortest string "EmitStr"
        case 42: // Recognized '{identifier}',	Shortest string "EmitStre"
        case 43: // Recognized '{identifier}',	Shortest string "EmitStrea"
        case 44: // Recognized '{identifier}',	Shortest string "EmitStream"
        case 45: // Recognized '{identifier}',	Shortest string "End"
        case 46: // Recognized '{identifier}',	Shortest string "EndS"
        case 47: // Recognized '{identifier}',	Shortest string "EndP"
        case 48: // Recognized '{identifier}',	Shortest string "EndPr"
        case 49: // Recognized '{identifier}',	Shortest string "EndPri"
        case 50: // Recognized '{identifier}',	Shortest string "EndPrim"
        case 51: // Recognized '{identifier}',	Shortest string "EndPrimi"
        case 52: // Recognized '{identifier}',	Shortest string "EndPrimit"
        case 53: // Recognized '{identifier}',	Shortest string "EndPrimiti"
        case 54: // Recognized '{identifier}',	Shortest string "distanc"
        case 55: // Recognized '{identifier}',	Shortest string "EndSt"
        case 56: // Recognized '{identifier}',	Shortest string "EndStr"
        case 57: // Recognized '{identifier}',	Shortest string "EndStre"
        case 58: // Recognized '{identifier}',	Shortest string "EndStrea"
        case 59: // Recognized '{identifier}',	Shortest string "EndStream"
        case 60: // Recognized '{identifier}',	Shortest string "gr"
        case 61: // Recognized '{identifier}',	Shortest string "gl"
        case 62: // Recognized '{identifier}',	Shortest string "gl_"
        case 63: // Recognized '{identifier}',	Shortest string "gl_o"
        case 64: // Recognized '{identifier}',	Shortest string "gl_D"
        case 65: // Recognized '{identifier}',	Shortest string "gl_C"
        case 66: // Recognized '{identifier}',	Shortest string "gl_S"
        case 67: // Recognized '{identifier}',	Shortest string "gl_M"
        case 68: // Recognized '{identifier}',	Shortest string "gl_V"
        case 69: // Recognized '{identifier}',	Shortest string "gl_I"
        case 70: // Recognized '{identifier}',	Shortest string "gl_P"
        case 71: // Recognized '{identifier}',	Shortest string "gl_T"
        case 72: // Recognized '{identifier}',	Shortest string "gl_L"
        case 73: // Recognized '{identifier}',	Shortest string "gl_F"
        case 74: // Recognized '{identifier}',	Shortest string "gl_N"
        case 75: // Recognized '{identifier}',	Shortest string "gl_W"
        case 76: // Recognized '{identifier}',	Shortest string "gl_G"
        case 77: // Recognized '{identifier}',	Shortest string "gl_Gl"
        case 78: // Recognized '{identifier}',	Shortest string "gl_Glo"
        case 79: // Recognized '{identifier}',	Shortest string "gl_Glob"
        case 80: // Recognized '{identifier}',	Shortest string "gl_Globa"
        case 81: // Recognized '{identifier}',	Shortest string "gl_Global"
        case 82: // Recognized '{identifier}',	Shortest string "gl_GlobalI"
        case 83: // Recognized '{identifier}',	Shortest string "gl_GlobalIn"
        case 84: // Recognized '{identifier}',	Shortest string "gl_Inv"
        case 85: // Recognized '{identifier}',	Shortest string "gl_Invo"
        case 86: // Recognized '{identifier}',	Shortest string "gl_Invoc"
        case 87: // Recognized '{identifier}',	Shortest string "gl_Invoca"
        case 88: // Recognized '{identifier}',	Shortest string "gl_Invocat"
        case 89: // Recognized '{identifier}',	Shortest string "gl_Invocati"
        case 90: // Recognized '{identifier}',	Shortest string "gl_Invocatio"
        case 91: // Recognized '{identifier}',	Shortest string "gl_Vertex"
        case 92: // Recognized '{identifier}',	Shortest string "gl_SampleI"
        case 94: // Recognized '{identifier}',	Shortest string "gl_Wo"
        case 95: // Recognized '{identifier}',	Shortest string "gl_Wor"
        case 96: // Recognized '{identifier}',	Shortest string "gl_Work"
        case 97: // Recognized '{identifier}',	Shortest string "gl_WorkG"
        case 98: // Recognized '{identifier}',	Shortest string "gl_WorkGr"
        case 99: // Recognized '{identifier}',	Shortest string "gl_WorkGro"
        case 100: // Recognized '{identifier}',	Shortest string "gl_WorkGrou"
        case 101: // Recognized '{identifier}',	Shortest string "gl_WorkGroup"
        case 102: // Recognized '{identifier}',	Shortest string "gl_PointS"
        case 103: // Recognized '{identifier}',	Shortest string "gl_PointSi"
        case 104: // Recognized '{identifier}',	Shortest string "gl_PointSiz"
        case 105: // Recognized '{identifier}',	Shortest string "gl_Nu"
        case 106: // Recognized '{identifier}',	Shortest string "gl_Num"
        case 107: // Recognized '{identifier}',	Shortest string "gl_NumS"
        case 108: // Recognized '{identifier}',	Shortest string "gl_NumW"
        case 109: // Recognized '{identifier}',	Shortest string "gl_NumWo"
        case 110: // Recognized '{identifier}',	Shortest string "gl_NumWor"
        case 111: // Recognized '{identifier}',	Shortest string "gl_NumWork"
        case 112: // Recognized '{identifier}',	Shortest string "gl_NumWorkG"
        case 113: // Recognized '{identifier}',	Shortest string "gl_NumWorkGr"
        case 114: // Recognized '{identifier}',	Shortest string "gl_NumWorkGro"
        case 115: // Recognized '{identifier}',	Shortest string "gl_NumWorkGrou"
        case 116: // Recognized '{identifier}',	Shortest string "gl_NumSample"
        case 117: // Recognized '{identifier}',	Shortest string "gl_NumSa"
        case 118: // Recognized '{identifier}',	Shortest string "gl_NumSam"
        case 119: // Recognized '{identifier}',	Shortest string "gl_NumSamp"
        case 120: // Recognized '{identifier}',	Shortest string "gl_NumSampl"
        case 121: // Recognized '{identifier}',	Shortest string "gl_Fr"
        case 122: // Recognized '{identifier}',	Shortest string "gl_Fro"
        case 123: // Recognized '{identifier}',	Shortest string "gl_Fra"
        case 124: // Recognized '{identifier}',	Shortest string "gl_Frag"
        case 125: // Recognized '{identifier}',	Shortest string "gl_FragD"
        case 126: // Recognized '{identifier}',	Shortest string "gl_FragC"
        case 127: // Recognized '{identifier}',	Shortest string "gl_FragCo"
        case 128: // Recognized '{identifier}',	Shortest string "gl_FragCoo"
        case 129: // Recognized '{identifier}',	Shortest string "gl_FragCoor"
        case 130: // Recognized '{identifier}',	Shortest string "gl_FragDe"
        case 131: // Recognized '{identifier}',	Shortest string "gl_FragDep"
        case 132: // Recognized '{identifier}',	Shortest string "gl_FragDept"
        case 133: // Recognized '{identifier}',	Shortest string "gl_Fron"
        case 134: // Recognized '{identifier}',	Shortest string "gl_Front"
        case 135: // Recognized '{identifier}',	Shortest string "gl_FrontF"
        case 136: // Recognized '{identifier}',	Shortest string "gl_FrontFa"
        case 137: // Recognized '{identifier}',	Shortest string "gl_FrontFac"
        case 138: // Recognized '{identifier}',	Shortest string "gl_FrontFaci"
        case 139: // Recognized '{identifier}',	Shortest string "gl_FrontFacin"
        case 140: // Recognized '{identifier}',	Shortest string "gl_Lo"
        case 141: // Recognized '{identifier}',	Shortest string "gl_La"
        case 142: // Recognized '{identifier}',	Shortest string "gl_Lay"
        case 143: // Recognized '{identifier}',	Shortest string "gl_Laye"
        case 144: // Recognized '{identifier}',	Shortest string "gl_Loc"
        case 145: // Recognized '{identifier}',	Shortest string "gl_Loca"
        case 146: // Recognized '{identifier}',	Shortest string "gl_Local"
        case 147: // Recognized '{identifier}',	Shortest string "gl_LocalI"
        case 148: // Recognized '{identifier}',	Shortest string "gl_LocalIn"
        case 149: // Recognized '{identifier}',	Shortest string "gl_LocalInv"
        case 150: // Recognized '{identifier}',	Shortest string "gl_LocalInvo"
        case 151: // Recognized '{identifier}',	Shortest string "gl_LocalInvoc"
        case 152: // Recognized '{identifier}',	Shortest string "gl_LocalInvoca"
        case 153: // Recognized '{identifier}',	Shortest string "gl_LocalInvocat"
        case 154: // Recognized '{identifier}',	Shortest string "gl_LocalInvocati"
        case 155: // Recognized '{identifier}',	Shortest string "gl_LocalInvocatio"
        case 156: // Recognized '{identifier}',	Shortest string "gl_LocalInvocation"
        case 157: // Recognized '{identifier}',	Shortest string "gl_LocalInvocationI"
        case 158: // Recognized '{identifier}',	Shortest string "gl_ViewportIn"
        case 159: // Recognized '{identifier}',	Shortest string "gl_PerVert"
        case 160: // Recognized '{identifier}',	Shortest string "gl_PerVerte"
        case 161: // Recognized '{identifier}',	Shortest string "gl_Te"
        case 162: // Recognized '{identifier}',	Shortest string "gl_Tes"
        case 163: // Recognized '{identifier}',	Shortest string "gl_Tess"
        case 164: // Recognized '{identifier}',	Shortest string "gl_TessL"
        case 165: // Recognized '{identifier}',	Shortest string "gl_TessLe"
        case 166: // Recognized '{identifier}',	Shortest string "gl_TessLev"
        case 167: // Recognized '{identifier}',	Shortest string "gl_TessLeve"
        case 168: // Recognized '{identifier}',	Shortest string "gl_TessLevel"
        case 169: // Recognized '{identifier}',	Shortest string "gl_TessLevelI"
        case 170: // Recognized '{identifier}',	Shortest string "gl_TessLevelO"
        case 171: // Recognized '{identifier}',	Shortest string "gl_TessLevelOu"
        case 172: // Recognized '{identifier}',	Shortest string "gl_TessLevelIn"
        case 173: // Recognized '{identifier}',	Shortest string "gl_Pe"
        case 174: // Recognized '{identifier}',	Shortest string "gl_Pr"
        case 175: // Recognized '{identifier}',	Shortest string "gl_Po"
        case 176: // Recognized '{identifier}',	Shortest string "gl_Pa"
        case 177: // Recognized '{identifier}',	Shortest string "gl_Pat"
        case 178: // Recognized '{identifier}',	Shortest string "gl_Patc"
        case 179: // Recognized '{identifier}',	Shortest string "gl_Patch"
        case 180: // Recognized '{identifier}',	Shortest string "gl_PatchV"
        case 181: // Recognized '{identifier}',	Shortest string "gl_PatchVe"
        case 182: // Recognized '{identifier}',	Shortest string "gl_PatchVer"
        case 183: // Recognized '{identifier}',	Shortest string "gl_PatchVert"
        case 184: // Recognized '{identifier}',	Shortest string "gl_PatchVerti"
        case 185: // Recognized '{identifier}',	Shortest string "gl_PatchVertic"
        case 186: // Recognized '{identifier}',	Shortest string "gl_PatchVertice"
        case 187: // Recognized '{identifier}',	Shortest string "gl_PatchVertices"
        case 188: // Recognized '{identifier}',	Shortest string "gl_i"
        case 189: // Recognized '{identifier}',	Shortest string "gl_Pos"
        case 190: // Recognized '{identifier}',	Shortest string "gl_Poi"
        case 191: // Recognized '{identifier}',	Shortest string "gl_Poin"
        case 192: // Recognized '{identifier}',	Shortest string "gl_Point"
        case 193: // Recognized '{identifier}',	Shortest string "gl_Posi"
        case 194: // Recognized '{identifier}',	Shortest string "gl_Posit"
        case 195: // Recognized '{identifier}',	Shortest string "gl_Positi"
        case 196: // Recognized '{identifier}',	Shortest string "gl_Pri"
        case 197: // Recognized '{identifier}',	Shortest string "gl_Prim"
        case 198: // Recognized '{identifier}',	Shortest string "gl_Primi"
        case 199: // Recognized '{identifier}',	Shortest string "gl_Primit"
        case 200: // Recognized '{identifier}',	Shortest string "gl_Primiti"
        case 201: // Recognized '{identifier}',	Shortest string "gl_Primitiv"
        case 202: // Recognized '{identifier}',	Shortest string "gl_Primitive"
        case 203: // Recognized '{identifier}',	Shortest string "gl_PrimitiveI"
        case 205: // Recognized '{identifier}',	Shortest string "gl_Per"
        case 206: // Recognized '{identifier}',	Shortest string "gl_PerV"
        case 207: // Recognized '{identifier}',	Shortest string "gl_PerVe"
        case 208: // Recognized '{identifier}',	Shortest string "gl_PerVer"
        case 209: // Recognized '{identifier}',	Shortest string "gl_In"
        case 210: // Recognized '{identifier}',	Shortest string "gl_Ins"
        case 211: // Recognized '{identifier}',	Shortest string "gl_Inst"
        case 212: // Recognized '{identifier}',	Shortest string "gl_Insta"
        case 213: // Recognized '{identifier}',	Shortest string "gl_Instan"
        case 214: // Recognized '{identifier}',	Shortest string "gl_Instanc"
        case 215: // Recognized '{identifier}',	Shortest string "gl_Ve"
        case 216: // Recognized '{identifier}',	Shortest string "gl_Vi"
        case 217: // Recognized '{identifier}',	Shortest string "gl_Vie"
        case 218: // Recognized '{identifier}',	Shortest string "gl_View"
        case 219: // Recognized '{identifier}',	Shortest string "gl_Viewp"
        case 220: // Recognized '{identifier}',	Shortest string "gl_Viewpo"
        case 221: // Recognized '{identifier}',	Shortest string "gl_Viewpor"
        case 222: // Recognized '{identifier}',	Shortest string "gl_Viewport"
        case 223: // Recognized '{identifier}',	Shortest string "gl_ViewportI"
        case 224: // Recognized '{identifier}',	Shortest string "gl_Ver"
        case 225: // Recognized '{identifier}',	Shortest string "gl_Vert"
        case 226: // Recognized '{identifier}',	Shortest string "gl_Verte"
        case 227: // Recognized '{identifier}',	Shortest string "gl_Mi"
        case 228: // Recognized '{identifier}',	Shortest string "gl_Ma"
        case 229: // Recognized '{identifier}',	Shortest string "gl_Max"
        case 230: // Recognized '{identifier}',	Shortest string "gl_MaxD"
        case 231: // Recognized '{identifier}',	Shortest string "gl_MaxC"
        case 232: // Recognized '{identifier}',	Shortest string "gl_MaxA"
        case 233: // Recognized '{identifier}',	Shortest string "gl_MaxV"
        case 234: // Recognized '{identifier}',	Shortest string "gl_MaxI"
        case 235: // Recognized '{identifier}',	Shortest string "gl_MaxP"
        case 236: // Recognized '{identifier}',	Shortest string "gl_MaxT"
        case 237: // Recognized '{identifier}',	Shortest string "gl_MaxF"
        case 238: // Recognized '{identifier}',	Shortest string "gl_MaxG"
        case 239: // Recognized '{identifier}',	Shortest string "gl_MaxGe"
        case 240: // Recognized '{identifier}',	Shortest string "gl_MaxGeo"
        case 241: // Recognized '{identifier}',	Shortest string "gl_MaxGeom"
        case 242: // Recognized '{identifier}',	Shortest string "gl_MaxGeome"
        case 243: // Recognized '{identifier}',	Shortest string "gl_MaxGeomet"
        case 244: // Recognized '{identifier}',	Shortest string "gl_MaxGeometr"
        case 245: // Recognized '{identifier}',	Shortest string "gl_MaxGeometry"
        case 246: // Recognized '{identifier}',	Shortest string "gl_MaxComputeA"
        case 247: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryV"
        case 248: // Recognized '{identifier}',	Shortest string "gl_MaxFragmentI"
        case 249: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryT"
        case 250: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryO"
        case 251: // Recognized '{identifier}',	Shortest string "gl_MaxComputeU"
        case 252: // Recognized '{identifier}',	Shortest string "gl_MaxComputeUn"
        case 253: // Recognized '{identifier}',	Shortest string "gl_MaxComputeUni"
        case 254: // Recognized '{identifier}',	Shortest string "gl_MaxComputeUnif"
        case 255: // Recognized '{identifier}',	Shortest string "gl_MaxComputeUnifo"
        case 256: // Recognized '{identifier}',	Shortest string "gl_MaxComputeUnifor"
        case 257: // Recognized '{identifier}',	Shortest string "gl_MaxTessPatch"
        case 258: // Recognized '{identifier}',	Shortest string "gl_MaxVaryingC"
        case 259: // Recognized '{identifier}',	Shortest string "gl_MaxVaryingCo"
        case 260: // Recognized '{identifier}',	Shortest string "gl_MaxVaryingCom"
        case 261: // Recognized '{identifier}',	Shortest string "gl_MaxVaryingComp"
        case 262: // Recognized '{identifier}',	Shortest string "gl_MaxVaryingCompo"
        case 263: // Recognized '{identifier}',	Shortest string "gl_MaxVaryingCompon"
        case 264: // Recognized '{identifier}',	Shortest string "gl_MaxVaryingCompone"
        case 265: // Recognized '{identifier}',	Shortest string "gl_MaxViewpor"
        case 266: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryOu"
        case 267: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryOut"
        case 268: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryOutp"
        case 269: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryOutpu"
        case 270: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryOutput"
        case 271: // Recognized '{identifier}',	Shortest string "gl_MaxPatchV"
        case 272: // Recognized '{identifier}',	Shortest string "gl_MaxPatchVe"
        case 273: // Recognized '{identifier}',	Shortest string "gl_MaxPatchVer"
        case 274: // Recognized '{identifier}',	Shortest string "gl_MaxPatchVert"
        case 275: // Recognized '{identifier}',	Shortest string "gl_MaxClipDistan"
        case 276: // Recognized '{identifier}',	Shortest string "gl_MaxVertexTe"
        case 277: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryTo"
        case 278: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryTot"
        case 279: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryTota"
        case 280: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryTotal"
        case 281: // Recognized '{identifier}',	Shortest string "gl_MaxVertexO"
        case 282: // Recognized '{identifier}',	Shortest string "gl_MaxVertexOu"
        case 283: // Recognized '{identifier}',	Shortest string "gl_MaxVertexOut"
        case 284: // Recognized '{identifier}',	Shortest string "gl_MaxVertexOutp"
        case 285: // Recognized '{identifier}',	Shortest string "gl_MaxVertexOutpu"
        case 286: // Recognized '{identifier}',	Shortest string "gl_MaxTex"
        case 287: // Recognized '{identifier}',	Shortest string "gl_MaxText"
        case 288: // Recognized '{identifier}',	Shortest string "gl_MaxTextu"
        case 289: // Recognized '{identifier}',	Shortest string "gl_MaxTextur"
        case 290: // Recognized '{identifier}',	Shortest string "gl_MaxTexture"
        case 291: // Recognized '{identifier}',	Shortest string "gl_MaxTextureI"
        case 292: // Recognized '{identifier}',	Shortest string "gl_MaxTextureIm"
        case 293: // Recognized '{identifier}',	Shortest string "gl_MaxTextureIma"
        case 294: // Recognized '{identifier}',	Shortest string "gl_MaxTextureImag"
        case 295: // Recognized '{identifier}',	Shortest string "gl_MaxTextureImage"
        case 296: // Recognized '{identifier}',	Shortest string "gl_MaxImageU"
        case 297: // Recognized '{identifier}',	Shortest string "gl_MaxImageUn"
        case 298: // Recognized '{identifier}',	Shortest string "gl_MaxVertexIm"
        case 299: // Recognized '{identifier}',	Shortest string "gl_MaxVertexIma"
        case 300: // Recognized '{identifier}',	Shortest string "gl_MaxVertexImag"
        case 301: // Recognized '{identifier}',	Shortest string "gl_MaxVertexImage"
        case 302: // Recognized '{identifier}',	Shortest string "gl_MaxVertexImageU"
        case 303: // Recognized '{identifier}',	Shortest string "gl_MaxVertexImageUn"
        case 304: // Recognized '{identifier}',	Shortest string "gl_MaxVertexImageUni"
        case 305: // Recognized '{identifier}',	Shortest string "gl_MaxVertexImageUnif"
        case 306: // Recognized '{identifier}',	Shortest string "gl_MaxVertexImageUnifo"
        case 307: // Recognized '{identifier}',	Shortest string "gl_MaxVertexImageUnifor"
        case 308: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryVa"
        case 309: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryVar"
        case 310: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryVary"
        case 311: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryVaryi"
        case 312: // Recognized '{identifier}',	Shortest string "gl_MaxGeometryVaryin"
        case 313: // Recognized '{identifier}',	Shortest string "gl_MaxComputeAt"
        case 314: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAto"
        case 315: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAtom"
        case 316: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAtomi"
        case 317: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAtomic"
        case 318: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAtomicC"
        case 319: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAtomicCo"
        case 320: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAtomicCou"
        case 321: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAtomicCoun"
        case 322: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAtomicCount"
        case 323: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAtomicCounte"
        case 324: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAtomicCounter"
        case 325: // Recognized '{identifier}',	Shortest string "gl_MaxDrawB"
        case 326: // Recognized '{identifier}',	Shortest string "gl_MaxDrawBu"
        case 327: // Recognized '{identifier}',	Shortest string "gl_MaxDrawBuf"
        case 328: // Recognized '{identifier}',	Shortest string "gl_MaxDrawBuff"
        case 329: // Recognized '{identifier}',	Shortest string "gl_MaxDrawBuffe"
        case 330: // Recognized '{identifier}',	Shortest string "gl_MaxFr"
        case 331: // Recognized '{identifier}',	Shortest string "gl_MaxFra"
        case 332: // Recognized '{identifier}',	Shortest string "gl_MaxFrag"
        case 333: // Recognized '{identifier}',	Shortest string "gl_MaxFragm"
        case 334: // Recognized '{identifier}',	Shortest string "gl_MaxFragme"
        case 335: // Recognized '{identifier}',	Shortest string "gl_MaxFragmen"
        case 336: // Recognized '{identifier}',	Shortest string "gl_MaxFragment"
        case 337: // Recognized '{identifier}',	Shortest string "gl_MaxVertexU"
        case 338: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUn"
        case 339: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUni"
        case 340: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUnif"
        case 341: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUnifo"
        case 342: // Recognized '{identifier}',	Shortest string "gl_MaxVertexUnifor"
        case 343: // Recognized '{identifier}',	Shortest string "gl_MaxVarying"
        case 344: // Recognized '{identifier}',	Shortest string "gl_MaxVaryingV"
        case 345: // Recognized '{identifier}',	Shortest string "gl_MaxVaryingVe"
        case 346: // Recognized '{identifier}',	Shortest string "gl_MaxVaryingVec"
        case 347: // Recognized '{identifier}',	Shortest string "gl_MaxVaryingVect"
        case 348: // Recognized '{identifier}',	Shortest string "gl_MaxTe"
        case 349: // Recognized '{identifier}',	Shortest string "gl_MaxTes"
        case 350: // Recognized '{identifier}',	Shortest string "gl_MaxTess"
        case 351: // Recognized '{identifier}',	Shortest string "gl_MaxTessC"
        case 352: // Recognized '{identifier}',	Shortest string "gl_MaxTessP"
        case 353: // Recognized '{identifier}',	Shortest string "gl_MaxTessG"
        case 354: // Recognized '{identifier}',	Shortest string "gl_MaxTessE"
        case 355: // Recognized '{identifier}',	Shortest string "gl_MaxTessEv"
        case 356: // Recognized '{identifier}',	Shortest string "gl_MaxTessEva"
        case 357: // Recognized '{identifier}',	Shortest string "gl_MaxTessEval"
        case 358: // Recognized '{identifier}',	Shortest string "gl_MaxTessEvalu"
        case 359: // Recognized '{identifier}',	Shortest string "gl_MaxTessEvalua"
        case 360: // Recognized '{identifier}',	Shortest string "gl_MaxTessEvaluat"
        case 361: // Recognized '{identifier}',	Shortest string "gl_MaxTessEvaluati"
        case 362: // Recognized '{identifier}',	Shortest string "gl_MaxTessEvaluatio"
        case 363: // Recognized '{identifier}',	Shortest string "gl_MaxTessEvaluation"
        case 364: // Recognized '{identifier}',	Shortest string "gl_MaxVertexT"
        case 365: // Recognized '{identifier}',	Shortest string "gl_MaxTessGe"
        case 366: // Recognized '{identifier}',	Shortest string "gl_MaxTessGen"
        case 367: // Recognized '{identifier}',	Shortest string "gl_MaxTessGenL"
        case 368: // Recognized '{identifier}',	Shortest string "gl_MaxTessGenLe"
        case 369: // Recognized '{identifier}',	Shortest string "gl_MaxTessGenLev"
        case 370: // Recognized '{identifier}',	Shortest string "gl_MaxTessGenLeve"
        case 371: // Recognized '{identifier}',	Shortest string "gl_MaxTessPa"
        case 372: // Recognized '{identifier}',	Shortest string "gl_MaxTessPat"
        case 373: // Recognized '{identifier}',	Shortest string "gl_MaxTessPatc"
        case 374: // Recognized '{identifier}',	Shortest string "gl_MaxTessCo"
        case 375: // Recognized '{identifier}',	Shortest string "gl_MaxTessCon"
        case 376: // Recognized '{identifier}',	Shortest string "gl_MaxTessCont"
        case 377: // Recognized '{identifier}',	Shortest string "gl_MaxTessContr"
        case 378: // Recognized '{identifier}',	Shortest string "gl_MaxTessContro"
        case 379: // Recognized '{identifier}',	Shortest string "gl_MaxTessControl"
        case 380: // Recognized '{identifier}',	Shortest string "gl_MinPr"
        case 381: // Recognized '{identifier}',	Shortest string "gl_MaxPa"
        case 382: // Recognized '{identifier}',	Shortest string "gl_MaxPat"
        case 383: // Recognized '{identifier}',	Shortest string "gl_MaxPatc"
        case 384: // Recognized '{identifier}',	Shortest string "gl_MaxPatch"
        case 385: // Recognized '{identifier}',	Shortest string "gl_MinPro"
        case 386: // Recognized '{identifier}',	Shortest string "gl_MinProg"
        case 387: // Recognized '{identifier}',	Shortest string "gl_MinProgr"
        case 388: // Recognized '{identifier}',	Shortest string "gl_MinProgra"
        case 389: // Recognized '{identifier}',	Shortest string "gl_MinProgram"
        case 390: // Recognized '{identifier}',	Shortest string "gl_MinProgramT"
        case 391: // Recognized '{identifier}',	Shortest string "gl_MinProgramTe"
        case 392: // Recognized '{identifier}',	Shortest string "gl_MinProgramTex"
        case 393: // Recognized '{identifier}',	Shortest string "gl_MinProgramTexe"
        case 394: // Recognized '{identifier}',	Shortest string "gl_MinProgramTexel"
        case 395: // Recognized '{identifier}',	Shortest string "gl_MinProgramTexelO"
        case 396: // Recognized '{identifier}',	Shortest string "gl_MinProgramTexelOf"
        case 397: // Recognized '{identifier}',	Shortest string "gl_MinProgramTexelOff"
        case 398: // Recognized '{identifier}',	Shortest string "gl_MinProgramTexelOffs"
        case 399: // Recognized '{identifier}',	Shortest string "gl_ou"
        case 400: // Recognized '{identifier}',	Shortest string "gl_MaxIm"
        case 401: // Recognized '{identifier}',	Shortest string "gl_MaxIma"
        case 402: // Recognized '{identifier}',	Shortest string "gl_MaxImag"
        case 403: // Recognized '{identifier}',	Shortest string "gl_MaxImage"
        case 404: // Recognized '{identifier}',	Shortest string "gl_MaxVe"
        case 405: // Recognized '{identifier}',	Shortest string "gl_MaxVi"
        case 406: // Recognized '{identifier}',	Shortest string "gl_MaxVa"
        case 407: // Recognized '{identifier}',	Shortest string "gl_MaxVar"
        case 408: // Recognized '{identifier}',	Shortest string "gl_MaxVary"
        case 409: // Recognized '{identifier}',	Shortest string "gl_MaxVaryi"
        case 410: // Recognized '{identifier}',	Shortest string "gl_MaxVaryin"
        case 411: // Recognized '{identifier}',	Shortest string "gl_MaxVie"
        case 412: // Recognized '{identifier}',	Shortest string "gl_MaxView"
        case 413: // Recognized '{identifier}',	Shortest string "gl_MaxViewp"
        case 414: // Recognized '{identifier}',	Shortest string "gl_MaxViewpo"
        case 415: // Recognized '{identifier}',	Shortest string "gl_MaxVer"
        case 416: // Recognized '{identifier}',	Shortest string "gl_MaxVert"
        case 417: // Recognized '{identifier}',	Shortest string "gl_MaxVerte"
        case 418: // Recognized '{identifier}',	Shortest string "gl_MaxVertex"
        case 419: // Recognized '{identifier}',	Shortest string "gl_MaxVertexA"
        case 420: // Recognized '{identifier}',	Shortest string "gl_MaxVertexI"
        case 421: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAt"
        case 422: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAtt"
        case 423: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAttr"
        case 424: // Recognized '{identifier}',	Shortest string "gl_MaxVertexAttri"
        case 425: // Recognized '{identifier}',	Shortest string "gl_MaxAt"
        case 426: // Recognized '{identifier}',	Shortest string "gl_MaxAto"
        case 427: // Recognized '{identifier}',	Shortest string "gl_MaxAtom"
        case 428: // Recognized '{identifier}',	Shortest string "gl_MaxAtomi"
        case 429: // Recognized '{identifier}',	Shortest string "gl_MaxAtomic"
        case 430: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicC"
        case 431: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCo"
        case 432: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCou"
        case 433: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCoun"
        case 434: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCount"
        case 435: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCounte"
        case 436: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCounter"
        case 437: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCounterB"
        case 438: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCounterBi"
        case 439: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCounterBu"
        case 440: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCounterBuf"
        case 441: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCounterBuff"
        case 442: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCounterBuffe"
        case 443: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCounterBuffer"
        case 444: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCounterBin"
        case 445: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCounterBind"
        case 446: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCounterBindi"
        case 447: // Recognized '{identifier}',	Shortest string "gl_MaxAtomicCounterBindin"
        case 448: // Recognized '{identifier}',	Shortest string "gl_MaxCo"
        case 449: // Recognized '{identifier}',	Shortest string "gl_MaxCl"
        case 450: // Recognized '{identifier}',	Shortest string "gl_MaxCli"
        case 451: // Recognized '{identifier}',	Shortest string "gl_MaxClip"
        case 452: // Recognized '{identifier}',	Shortest string "gl_MaxClipD"
        case 453: // Recognized '{identifier}',	Shortest string "gl_MaxClipDi"
        case 454: // Recognized '{identifier}',	Shortest string "gl_MaxClipDis"
        case 455: // Recognized '{identifier}',	Shortest string "gl_MaxClipDist"
        case 456: // Recognized '{identifier}',	Shortest string "gl_MaxClipDista"
        case 457: // Recognized '{identifier}',	Shortest string "gl_MaxCom"
        case 458: // Recognized '{identifier}',	Shortest string "gl_MaxComb"
        case 459: // Recognized '{identifier}',	Shortest string "gl_MaxComp"
        case 460: // Recognized '{identifier}',	Shortest string "gl_MaxCompu"
        case 461: // Recognized '{identifier}',	Shortest string "gl_MaxComput"
        case 462: // Recognized '{identifier}',	Shortest string "gl_MaxCompute"
        case 463: // Recognized '{identifier}',	Shortest string "gl_MaxComputeW"
        case 464: // Recognized '{identifier}',	Shortest string "gl_MaxComputeWo"
        case 465: // Recognized '{identifier}',	Shortest string "gl_MaxComputeWor"
        case 466: // Recognized '{identifier}',	Shortest string "gl_MaxComputeWork"
        case 467: // Recognized '{identifier}',	Shortest string "gl_MaxComputeWorkG"
        case 468: // Recognized '{identifier}',	Shortest string "gl_MaxComputeWorkGr"
        case 469: // Recognized '{identifier}',	Shortest string "gl_MaxComputeWorkGro"
        case 470: // Recognized '{identifier}',	Shortest string "gl_MaxComputeWorkGrou"
        case 471: // Recognized '{identifier}',	Shortest string "gl_MaxComputeWorkGroup"
        case 472: // Recognized '{identifier}',	Shortest string "gl_MaxComputeWorkGroupC"
        case 473: // Recognized '{identifier}',	Shortest string "gl_MaxComputeWorkGroupCo"
        case 474: // Recognized '{identifier}',	Shortest string "gl_MaxComputeWorkGroupCou"
        case 475: // Recognized '{identifier}',	Shortest string "gl_MaxCombi"
        case 476: // Recognized '{identifier}',	Shortest string "gl_MaxCombin"
        case 477: // Recognized '{identifier}',	Shortest string "gl_MaxCombine"
        case 478: // Recognized '{identifier}',	Shortest string "gl_MaxCombined"
        case 479: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedI"
        case 480: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedIm"
        case 481: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedIma"
        case 482: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImag"
        case 483: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImage"
        case 484: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageU"
        case 485: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUn"
        case 486: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUni"
        case 487: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnit"
        case 488: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnits"
        case 489: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsA"
        case 490: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsAn"
        case 491: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsAnd"
        case 492: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsAndF"
        case 493: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsAndFr"
        case 494: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsAndFra"
        case 495: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsAndFrag"
        case 496: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsAndFragm"
        case 497: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsAndFragme"
        case 498: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsAndFragmen"
        case 499: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsAndFragment"
        case 500: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsAndFragmentO"
        case 501: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsAndFragmentOu"
        case 502: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsAndFragmentOut"
        case 503: // Recognized '{identifier}',	Shortest string "gl_MaxCombinedImageUnitsAndFragmentOutp"
        case 504: // Recognized '{identifier}',	Shortest string "gl_MaxDr"
        case 505: // Recognized '{identifier}',	Shortest string "gl_MaxDra"
        case 506: // Recognized '{identifier}',	Shortest string "gl_MaxDraw"
        case 507: // Recognized '{identifier}',	Shortest string "gl_Min"
        case 508: // Recognized '{identifier}',	Shortest string "gl_MinP"
        case 509: // Recognized '{identifier}',	Shortest string "gl_Sa"
        case 510: // Recognized '{identifier}',	Shortest string "gl_Sam"
        case 511: // Recognized '{identifier}',	Shortest string "gl_Samp"
        case 512: // Recognized '{identifier}',	Shortest string "gl_Sampl"
        case 513: // Recognized '{identifier}',	Shortest string "gl_Sample"
        case 514: // Recognized '{identifier}',	Shortest string "gl_SampleM"
        case 515: // Recognized '{identifier}',	Shortest string "gl_SampleP"
        case 516: // Recognized '{identifier}',	Shortest string "gl_SamplePo"
        case 517: // Recognized '{identifier}',	Shortest string "gl_SampleMa"
        case 518: // Recognized '{identifier}',	Shortest string "gl_SampleMas"
        case 519: // Recognized '{identifier}',	Shortest string "gl_Cl"
        case 520: // Recognized '{identifier}',	Shortest string "gl_Cli"
        case 521: // Recognized '{identifier}',	Shortest string "gl_Clip"
        case 522: // Recognized '{identifier}',	Shortest string "gl_ClipD"
        case 523: // Recognized '{identifier}',	Shortest string "gl_ClipDi"
        case 524: // Recognized '{identifier}',	Shortest string "gl_ClipDis"
        case 525: // Recognized '{identifier}',	Shortest string "gl_ClipDist"
        case 526: // Recognized '{identifier}',	Shortest string "gl_ClipDista"
        case 527: // Recognized '{identifier}',	Shortest string "gl_ClipDistan"
        case 528: // Recognized '{identifier}',	Shortest string "gl_De"
        case 529: // Recognized '{identifier}',	Shortest string "gl_Dep"
        case 530: // Recognized '{identifier}',	Shortest string "gl_Dept"
        case 531: // Recognized '{identifier}',	Shortest string "gl_Depth"
        case 532: // Recognized '{identifier}',	Shortest string "gl_DepthR"
        case 533: // Recognized '{identifier}',	Shortest string "gl_DepthRa"
        case 534: // Recognized '{identifier}',	Shortest string "gl_DepthRan"
        case 535: // Recognized '{identifier}',	Shortest string "gre"
        case 536: // Recognized '{identifier}',	Shortest string "gro"
        case 537: // Recognized '{identifier}',	Shortest string "grou"
        case 538: // Recognized '{identifier}',	Shortest string "group"
        case 539: // Recognized '{identifier}',	Shortest string "groupM"
        case 540: // Recognized '{identifier}',	Shortest string "groupMe"
        case 541: // Recognized '{identifier}',	Shortest string "groupMem"
        case 542: // Recognized '{identifier}',	Shortest string "groupMemo"
        case 543: // Recognized '{identifier}',	Shortest string "groupMemor"
        case 544: // Recognized '{identifier}',	Shortest string "groupMemory"
        case 545: // Recognized '{identifier}',	Shortest string "groupMemoryB"
        case 546: // Recognized '{identifier}',	Shortest string "ba"
        case 547: // Recognized '{identifier}',	Shortest string "bar"
        case 548: // Recognized '{identifier}',	Shortest string "barr"
        case 549: // Recognized '{identifier}',	Shortest string "barri"
        case 550: // Recognized '{identifier}',	Shortest string "floo"
        case 551: // Recognized '{identifier}',	Shortest string "grea"
        case 552: // Recognized '{identifier}',	Shortest string "great"
        case 553: // Recognized '{identifier}',	Shortest string "greate"
        case 554: // Recognized '{identifier}',	Shortest string "less"
        case 555: // Recognized '{identifier}',	Shortest string "lessT"
        case 556: // Recognized '{identifier}',	Shortest string "lessTh"
        case 557: // Recognized '{identifier}',	Shortest string "lessTha"
        case 559: // Recognized '{identifier}',	Shortest string "notE"
        case 560: // Recognized '{identifier}',	Shortest string "eq"
        case 561: // Recognized '{identifier}',	Shortest string "equ"
        case 562: // Recognized '{identifier}',	Shortest string "al"
        case 563: // Recognized '{identifier}',	Shortest string "pr"
        case 564: // Recognized '{identifier}',	Shortest string "po"
        case 565: // Recognized '{identifier}',	Shortest string "pa"
        case 566: // Recognized '{identifier}',	Shortest string "pac"
        case 567: // Recognized '{identifier}',	Shortest string "pat"
        case 568: // Recognized '{identifier}',	Shortest string "patc"
        case 570: // Recognized '{identifier}',	Shortest string "pack"
        case 571: // Recognized '{identifier}',	Shortest string "packD"
        case 572: // Recognized '{identifier}',	Shortest string "packS"
        case 573: // Recognized '{identifier}',	Shortest string "packH"
        case 574: // Recognized '{identifier}',	Shortest string "packHa"
        case 575: // Recognized '{identifier}',	Shortest string "packHal"
        case 576: // Recognized '{identifier}',	Shortest string "packHalf"
        case 577: // Recognized '{identifier}',	Shortest string "packHalf2"
        case 579: // Recognized '{identifier}',	Shortest string "packSn"
        case 580: // Recognized '{identifier}',	Shortest string "packSno"
        case 581: // Recognized '{identifier}',	Shortest string "packSnor"
        case 582: // Recognized '{identifier}',	Shortest string "packSnorm"
        case 583: // Recognized '{identifier}',	Shortest string "packSnorm4"
        case 584: // Recognized '{identifier}',	Shortest string "packDo"
        case 585: // Recognized '{identifier}',	Shortest string "packDou"
        case 586: // Recognized '{identifier}',	Shortest string "packDoub"
        case 587: // Recognized '{identifier}',	Shortest string "packDoubl"
        case 588: // Recognized '{identifier}',	Shortest string "packDouble"
        case 589: // Recognized '{identifier}',	Shortest string "packDouble2"
        case 590: // Recognized '{identifier}',	Shortest string "pre"
        case 591: // Recognized '{identifier}',	Shortest string "prec"
        case 592: // Recognized '{identifier}',	Shortest string "preci"
        case 593: // Recognized '{identifier}',	Shortest string "precis"
        case 594: // Recognized '{identifier}',	Shortest string "precisi"
        case 595: // Recognized '{identifier}',	Shortest string "precisio"
        case 596: // Recognized '{identifier}',	Shortest string "me"
        case 597: // Recognized '{identifier}',	Shortest string "mi"
        case 598: // Recognized '{identifier}',	Shortest string "mo"
        case 599: // Recognized '{identifier}',	Shortest string "ma"
        case 600: // Recognized '{identifier}',	Shortest string "sig"
        case 601: // Recognized '{identifier}',	Shortest string "mat"
        case 602: // Recognized '{identifier}',	Shortest string "matr"
        case 605: // Recognized '{identifier}',	Shortest string "matri"
        case 606: // Recognized '{identifier}',	Shortest string "matrix"
        case 607: // Recognized '{identifier}',	Shortest string "matrixC"
        case 608: // Recognized '{identifier}',	Shortest string "matrixCo"
        case 609: // Recognized '{identifier}',	Shortest string "matrixCom"
        case 610: // Recognized '{identifier}',	Shortest string "matrixComp"
        case 611: // Recognized '{identifier}',	Shortest string "matrixCompM"
        case 612: // Recognized '{identifier}',	Shortest string "matrixCompMu"
        case 613: // Recognized '{identifier}',	Shortest string "sqr"
        case 615: // Recognized '{identifier}',	Shortest string "med"
        case 616: // Recognized '{identifier}',	Shortest string "mem"
        case 617: // Recognized '{identifier}',	Shortest string "memo"
        case 618: // Recognized '{identifier}',	Shortest string "memor"
        case 619: // Recognized '{identifier}',	Shortest string "memory"
        case 620: // Recognized '{identifier}',	Shortest string "memoryB"
        case 621: // Recognized '{identifier}',	Shortest string "memoryBa"
        case 622: // Recognized '{identifier}',	Shortest string "memoryBar"
        case 623: // Recognized '{identifier}',	Shortest string "memoryBarr"
        case 624: // Recognized '{identifier}',	Shortest string "memoryBarri"
        case 625: // Recognized '{identifier}',	Shortest string "memoryBarrie"
        case 627: // Recognized '{identifier}',	Shortest string "memoryBarrierS"
        case 628: // Recognized '{identifier}',	Shortest string "memoryBarrierA"
        case 629: // Recognized '{identifier}',	Shortest string "memoryBarrierB"
        case 630: // Recognized '{identifier}',	Shortest string "memoryBarrierI"
        case 631: // Recognized '{identifier}',	Shortest string "memoryBarrierIm"
        case 632: // Recognized '{identifier}',	Shortest string "atomicExchan"
        case 633: // Recognized '{identifier}',	Shortest string "memoryBarrierBu"
        case 634: // Recognized '{identifier}',	Shortest string "memoryBarrierBuf"
        case 635: // Recognized '{identifier}',	Shortest string "memoryBarrierAt"
        case 636: // Recognized '{identifier}',	Shortest string "memoryBarrierAto"
        case 637: // Recognized '{identifier}',	Shortest string "memoryBarrierAtom"
        case 638: // Recognized '{identifier}',	Shortest string "memoryBarrierAtomi"
        case 639: // Recognized '{identifier}',	Shortest string "memoryBarrierAtomic"
        case 640: // Recognized '{identifier}',	Shortest string "memoryBarrierAtomicC"
        case 641: // Recognized '{identifier}',	Shortest string "memoryBarrierAtomicCo"
        case 642: // Recognized '{identifier}',	Shortest string "memoryBarrierAtomicCou"
        case 643: // Recognized '{identifier}',	Shortest string "memoryBarrierAtomicCoun"
        case 644: // Recognized '{identifier}',	Shortest string "memoryBarrierSh"
        case 645: // Recognized '{identifier}',	Shortest string "memoryBarrierSha"
        case 646: // Recognized '{identifier}',	Shortest string "imulExtend"
        case 647: // Recognized '{identifier}',	Shortest string "imageLoa"
        case 648: // Recognized '{identifier}',	Shortest string "medi"
        case 649: // Recognized '{identifier}',	Shortest string "mediu"
        case 650: // Recognized '{identifier}',	Shortest string "low"
        case 651: // Recognized '{identifier}',	Shortest string "low_"
        case 652: // Recognized '{identifier}',	Shortest string "low_p"
        case 653: // Recognized '{identifier}',	Shortest string "low_pr"
        case 654: // Recognized '{identifier}',	Shortest string "low_pre"
        case 655: // Recognized '{identifier}',	Shortest string "low_prec"
        case 656: // Recognized '{identifier}',	Shortest string "low_preci"
        case 657: // Recognized '{identifier}',	Shortest string "low_precis"
        case 658: // Recognized '{identifier}',	Shortest string "iv"
        case 659: // Recognized '{identifier}',	Shortest string "br"
        case 660: // Recognized '{identifier}',	Shortest string "bi"
        case 661: // Recognized '{identifier}',	Shortest string "bo"
        case 662: // Recognized '{identifier}',	Shortest string "bu"
        case 663: // Recognized '{identifier}',	Shortest string "buf"
        case 664: // Recognized '{identifier}',	Shortest string "buff"
        case 665: // Recognized '{identifier}',	Shortest string "buffe"
        case 666: // Recognized '{identifier}',	Shortest string "boo"
        case 668: // Recognized '{identifier}',	Shortest string "bit"
        case 669: // Recognized '{identifier}',	Shortest string "bitf"
        case 670: // Recognized '{identifier}',	Shortest string "bitC"
        case 671: // Recognized '{identifier}',	Shortest string "bitCo"
        case 672: // Recognized '{identifier}',	Shortest string "bitCou"
        case 673: // Recognized '{identifier}',	Shortest string "bitfi"
        case 674: // Recognized '{identifier}',	Shortest string "bitfie"
        case 675: // Recognized '{identifier}',	Shortest string "bitfiel"
        case 676: // Recognized '{identifier}',	Shortest string "bitfield"
        case 677: // Recognized '{identifier}',	Shortest string "bitfieldR"
        case 678: // Recognized '{identifier}',	Shortest string "bitfieldI"
        case 679: // Recognized '{identifier}',	Shortest string "bitfieldE"
        case 680: // Recognized '{identifier}',	Shortest string "bitfieldEx"
        case 681: // Recognized '{identifier}',	Shortest string "bitfieldExt"
        case 682: // Recognized '{identifier}',	Shortest string "refr"
        case 683: // Recognized '{identifier}',	Shortest string "fra"
        case 684: // Recognized '{identifier}',	Shortest string "bitfieldIn"
        case 685: // Recognized '{identifier}',	Shortest string "bitfieldIns"
        case 686: // Recognized '{identifier}',	Shortest string "sq"
        case 687: // Recognized '{identifier}',	Shortest string "bitfieldRe"
        case 688: // Recognized '{identifier}',	Shortest string "bitfieldRev"
        case 689: // Recognized '{identifier}',	Shortest string "bitfieldReve"
        case 690: // Recognized '{identifier}',	Shortest string "transpo"
        case 691: // Recognized '{identifier}',	Shortest string "bre"
        case 692: // Recognized '{identifier}',	Shortest string "brea"
        case 694: // Recognized '{identifier}',	Shortest string "ive"
        case 695: // Recognized '{identifier}',	Shortest string "vec"
        case 697: // Recognized '{identifier}',	Shortest string "hi"
        case 698: // Recognized '{identifier}',	Shortest string "hig"
        case 699: // Recognized '{identifier}',	Shortest string "wr"
        case 700: // Recognized '{identifier}',	Shortest string "wh"
        case 701: // Recognized '{identifier}',	Shortest string "whi"
        case 702: // Recognized '{identifier}',	Shortest string "els"
        case 703: // Recognized '{identifier}',	Shortest string "wri"
        case 704: // Recognized '{identifier}',	Shortest string "writ"
        case 705: // Recognized '{identifier}',	Shortest string "read"
        case 706: // Recognized '{identifier}',	Shortest string "reado"
        case 707: // Recognized '{identifier}',	Shortest string "readon"
        case 708: // Recognized '{identifier}',	Shortest string "readonl"
        case 709: // Recognized '{identifier}',	Shortest string "de"
        case 710: // Recognized '{identifier}',	Shortest string "di"
        case 712: // Recognized '{identifier}',	Shortest string "dm"
        case 713: // Recognized '{identifier}',	Shortest string "dF"
        case 714: // Recognized '{identifier}',	Shortest string "dFd"
        case 715: // Recognized '{identifier}',	Shortest string "dma"
        case 716: // Recognized '{identifier}',	Shortest string "dmat"
        case 717: // Recognized '{identifier}',	Shortest string "dou"
        case 718: // Recognized '{identifier}',	Shortest string "doub"
        case 719: // Recognized '{identifier}',	Shortest string "doubl"
        case 720: // Recognized '{identifier}',	Shortest string "dis"
        case 721: // Recognized '{identifier}',	Shortest string "disc"
        case 722: // Recognized '{identifier}',	Shortest string "dist"
        case 723: // Recognized '{identifier}',	Shortest string "dista"
        case 724: // Recognized '{identifier}',	Shortest string "distan"
        case 725: // Recognized '{identifier}',	Shortest string "disca"
        case 726: // Recognized '{identifier}',	Shortest string "voi"
        case 727: // Recognized '{identifier}',	Shortest string "det"
        case 728: // Recognized '{identifier}',	Shortest string "def"
        case 729: // Recognized '{identifier}',	Shortest string "deg"
        case 730: // Recognized '{identifier}',	Shortest string "degr"
        case 731: // Recognized '{identifier}',	Shortest string "degre"
        case 732: // Recognized '{identifier}',	Shortest string "ab"
        case 733: // Recognized '{identifier}',	Shortest string "defa"
        case 734: // Recognized '{identifier}',	Shortest string "defau"
        case 735: // Recognized '{identifier}',	Shortest string "struc"
        case 736: // Recognized '{identifier}',	Shortest string "dete"
        case 737: // Recognized '{identifier}',	Shortest string "deter"
        case 738: // Recognized '{identifier}',	Shortest string "determ"
        case 739: // Recognized '{identifier}',	Shortest string "determi"
        case 740: // Recognized '{identifier}',	Shortest string "determin"
        case 741: // Recognized '{identifier}',	Shortest string "le"
        case 742: // Recognized '{identifier}',	Shortest string "lo"
        case 743: // Recognized '{identifier}',	Shortest string "la"
        case 744: // Recognized '{identifier}',	Shortest string "ld"
        case 745: // Recognized '{identifier}',	Shortest string "fre"
        case 746: // Recognized '{identifier}',	Shortest string "ste"
        case 747: // Recognized '{identifier}',	Shortest string "lay"
        case 748: // Recognized '{identifier}',	Shortest string "ino"
        case 749: // Recognized '{identifier}',	Shortest string "fla"
        case 752: // Recognized '{identifier}',	Shortest string "les"
        case 753: // Recognized '{identifier}',	Shortest string "len"
        case 754: // Recognized '{identifier}',	Shortest string "fwid"
        case 755: // Recognized '{identifier}',	Shortest string "fwidt"
        case 756: // Recognized '{identifier}',	Shortest string "as"
        case 757: // Recognized '{identifier}',	Shortest string "an"
        case 758: // Recognized '{identifier}',	Shortest string "ac"
        case 759: // Recognized '{identifier}',	Shortest string "at"
        case 760: // Recognized '{identifier}',	Shortest string "ato"
        case 761: // Recognized '{identifier}',	Shortest string "ta"
        case 763: // Recognized '{identifier}',	Shortest string "atom"
        case 764: // Recognized '{identifier}',	Shortest string "atomi"
        case 765: // Recognized '{identifier}',	Shortest string "atomic"
        case 766: // Recognized '{identifier}',	Shortest string "atomic_"
        case 767: // Recognized '{identifier}',	Shortest string "atomicC"
        case 768: // Recognized '{identifier}',	Shortest string "atomicA"
        case 769: // Recognized '{identifier}',	Shortest string "atomicM"
        case 770: // Recognized '{identifier}',	Shortest string "atomicE"
        case 771: // Recognized '{identifier}',	Shortest string "atomicX"
        case 772: // Recognized '{identifier}',	Shortest string "atomicEx"
        case 773: // Recognized '{identifier}',	Shortest string "atomicExc"
        case 774: // Recognized '{identifier}',	Shortest string "atomicExch"
        case 775: // Recognized '{identifier}',	Shortest string "atomicExcha"
        case 776: // Recognized '{identifier}',	Shortest string "atomicCo"
        case 777: // Recognized '{identifier}',	Shortest string "atomicCou"
        case 778: // Recognized '{identifier}',	Shortest string "atomicCom"
        case 779: // Recognized '{identifier}',	Shortest string "atomicComp"
        case 780: // Recognized '{identifier}',	Shortest string "atomicCompS"
        case 781: // Recognized '{identifier}',	Shortest string "atomicCompSw"
        case 782: // Recognized '{identifier}',	Shortest string "atomicCoun"
        case 783: // Recognized '{identifier}',	Shortest string "atomicCount"
        case 784: // Recognized '{identifier}',	Shortest string "atomicCounte"
        case 786: // Recognized '{identifier}',	Shortest string "atomicCounterD"
        case 787: // Recognized '{identifier}',	Shortest string "atomicCounterI"
        case 788: // Recognized '{identifier}',	Shortest string "atomicCounterDe"
        case 789: // Recognized '{identifier}',	Shortest string "atomicCounterDec"
        case 790: // Recognized '{identifier}',	Shortest string "atomicCounterDecr"
        case 791: // Recognized '{identifier}',	Shortest string "atomicCounterDecre"
        case 792: // Recognized '{identifier}',	Shortest string "atomicCounterDecrem"
        case 793: // Recognized '{identifier}',	Shortest string "atomic_u"
        case 794: // Recognized '{identifier}',	Shortest string "atomic_ui"
        case 795: // Recognized '{identifier}',	Shortest string "atomic_uin"
        case 796: // Recognized '{identifier}',	Shortest string "aco"
        case 797: // Recognized '{identifier}',	Shortest string "fr"
        case 798: // Recognized '{identifier}',	Shortest string "fi"
        case 799: // Recognized '{identifier}',	Shortest string "fo"
        case 800: // Recognized '{identifier}',	Shortest string "fa"
        case 801: // Recognized '{identifier}',	Shortest string "fl"
        case 802: // Recognized '{identifier}',	Shortest string "fw"
        case 803: // Recognized '{identifier}',	Shortest string "fm"
        case 804: // Recognized '{identifier}',	Shortest string "fwi"
        case 805: // Recognized '{identifier}',	Shortest string "flo"
        case 806: // Recognized '{identifier}',	Shortest string "floa"
        case 808: // Recognized '{identifier}',	Shortest string "floatB"
        case 809: // Recognized '{identifier}',	Shortest string "floatBi"
        case 810: // Recognized '{identifier}',	Shortest string "floatBit"
        case 811: // Recognized '{identifier}',	Shortest string "floatBits"
        case 812: // Recognized '{identifier}',	Shortest string "floatBitsT"
        case 813: // Recognized '{identifier}',	Shortest string "floatBitsTo"
        case 814: // Recognized '{identifier}',	Shortest string "floatBitsToU"
        case 815: // Recognized '{identifier}',	Shortest string "fac"
        case 816: // Recognized '{identifier}',	Shortest string "el"
        case 817: // Recognized '{identifier}',	Shortest string "face"
        case 818: // Recognized '{identifier}',	Shortest string "facef"
        case 819: // Recognized '{identifier}',	Shortest string "facefo"
        case 820: // Recognized '{identifier}',	Shortest string "facefor"
        case 821: // Recognized '{identifier}',	Shortest string "faceforw"
        case 822: // Recognized '{identifier}',	Shortest string "faceforwa"
        case 823: // Recognized '{identifier}',	Shortest string "fin"
        case 824: // Recognized '{identifier}',	Shortest string "find"
        case 825: // Recognized '{identifier}',	Shortest string "findM"
        case 826: // Recognized '{identifier}',	Shortest string "findMS"
        case 827: // Recognized '{identifier}',	Shortest string "us"
        case 828: // Recognized '{identifier}',	Shortest string "ui"
        case 829: // Recognized '{identifier}',	Shortest string "un"
        case 830: // Recognized '{identifier}',	Shortest string "ua"
        case 831: // Recognized '{identifier}',	Shortest string "um"
        case 832: // Recognized '{identifier}',	Shortest string "imu"
        case 833: // Recognized '{identifier}',	Shortest string "imul"
        case 834: // Recognized '{identifier}',	Shortest string "imulE"
        case 835: // Recognized '{identifier}',	Shortest string "imulEx"
        case 836: // Recognized '{identifier}',	Shortest string "imulExt"
        case 837: // Recognized '{identifier}',	Shortest string "imulExte"
        case 838: // Recognized '{identifier}',	Shortest string "imulExten"
        case 839: // Recognized '{identifier}',	Shortest string "uad"
        case 840: // Recognized '{identifier}',	Shortest string "uadd"
        case 841: // Recognized '{identifier}',	Shortest string "uaddC"
        case 842: // Recognized '{identifier}',	Shortest string "uaddCa"
        case 843: // Recognized '{identifier}',	Shortest string "uaddCar"
        case 844: // Recognized '{identifier}',	Shortest string "uni"
        case 845: // Recognized '{identifier}',	Shortest string "unp"
        case 846: // Recognized '{identifier}',	Shortest string "unpa"
        case 847: // Recognized '{identifier}',	Shortest string "unif"
        case 848: // Recognized '{identifier}',	Shortest string "unifo"
        case 849: // Recognized '{identifier}',	Shortest string "unifor"
        case 850: // Recognized '{identifier}',	Shortest string "uin"
        case 851: // Recognized '{identifier}',	Shortest string "iim"
        case 852: // Recognized '{identifier}',	Shortest string "iima"
        case 853: // Recognized '{identifier}',	Shortest string "iimag"
        case 854: // Recognized '{identifier}',	Shortest string "iimage"
        case 855: // Recognized '{identifier}',	Shortest string "image2"
        case 856: // Recognized '{identifier}',	Shortest string "image3"
        case 857: // Recognized '{identifier}',	Shortest string "image1"
        case 858: // Recognized '{identifier}',	Shortest string "imageC"
        case 859: // Recognized '{identifier}',	Shortest string "imageB"
        case 860: // Recognized '{identifier}',	Shortest string "imageBu"
        case 861: // Recognized '{identifier}',	Shortest string "imageBuf"
        case 862: // Recognized '{identifier}',	Shortest string "imageBuff"
        case 863: // Recognized '{identifier}',	Shortest string "imageBuffe"
        case 864: // Recognized '{identifier}',	Shortest string "imageCu"
        case 865: // Recognized '{identifier}',	Shortest string "imageCub"
        case 867: // Recognized '{identifier}',	Shortest string "imageCubeA"
        case 868: // Recognized '{identifier}',	Shortest string "imageCubeAr"
        case 869: // Recognized '{identifier}',	Shortest string "imageCubeArr"
        case 870: // Recognized '{identifier}',	Shortest string "imageCubeArra"
        case 874: // Recognized '{identifier}',	Shortest string "intB"
        case 875: // Recognized '{identifier}',	Shortest string "intBi"
        case 876: // Recognized '{identifier}',	Shortest string "intBit"
        case 877: // Recognized '{identifier}',	Shortest string "intBits"
        case 878: // Recognized '{identifier}',	Shortest string "intBitsT"
        case 879: // Recognized '{identifier}',	Shortest string "intBitsTo"
        case 880: // Recognized '{identifier}',	Shortest string "intBitsToF"
        case 881: // Recognized '{identifier}',	Shortest string "intBitsToFl"
        case 882: // Recognized '{identifier}',	Shortest string "intBitsToFlo"
        case 883: // Recognized '{identifier}',	Shortest string "usu"
        case 884: // Recognized '{identifier}',	Shortest string "isa"
        case 885: // Recognized '{identifier}',	Shortest string "isam"
        case 886: // Recognized '{identifier}',	Shortest string "isamp"
        case 887: // Recognized '{identifier}',	Shortest string "isampl"
        case 888: // Recognized '{identifier}',	Shortest string "isample"
        case 889: // Recognized '{identifier}',	Shortest string "usub"
        case 890: // Recognized '{identifier}',	Shortest string "usubB"
        case 891: // Recognized '{identifier}',	Shortest string "usubBo"
        case 892: // Recognized '{identifier}',	Shortest string "usubBor"
        case 893: // Recognized '{identifier}',	Shortest string "usubBorr"
        case 894: // Recognized '{identifier}',	Shortest string "te"
        case 895: // Recognized '{identifier}',	Shortest string "tr"
        case 896: // Recognized '{identifier}',	Shortest string "tru"
        case 897: // Recognized '{identifier}',	Shortest string "tra"
        case 898: // Recognized '{identifier}',	Shortest string "tran"
        case 899: // Recognized '{identifier}',	Shortest string "trans"
        case 900: // Recognized '{identifier}',	Shortest string "transp"
        case 901: // Recognized '{identifier}',	Shortest string "trun"
        case 902: // Recognized '{identifier}',	Shortest string "tex"
        case 903: // Recognized '{identifier}',	Shortest string "texe"
        case 904: // Recognized '{identifier}',	Shortest string "text"
        case 905: // Recognized '{identifier}',	Shortest string "textu"
        case 906: // Recognized '{identifier}',	Shortest string "textur"
        case 908: // Recognized '{identifier}',	Shortest string "normal"
        case 909: // Recognized '{identifier}',	Shortest string "textureP"
        case 910: // Recognized '{identifier}',	Shortest string "textureL"
        case 911: // Recognized '{identifier}',	Shortest string "textureG"
        case 912: // Recognized '{identifier}',	Shortest string "textureQ"
        case 913: // Recognized '{identifier}',	Shortest string "textureQu"
        case 914: // Recognized '{identifier}',	Shortest string "textureQue"
        case 915: // Recognized '{identifier}',	Shortest string "textureQuer"
        case 916: // Recognized '{identifier}',	Shortest string "textureQuery"
        case 917: // Recognized '{identifier}',	Shortest string "textureQueryL"
        case 918: // Recognized '{identifier}',	Shortest string "textureQueryLe"
        case 919: // Recognized '{identifier}',	Shortest string "textureQueryLev"
        case 920: // Recognized '{identifier}',	Shortest string "textureQueryLeve"
        case 921: // Recognized '{identifier}',	Shortest string "textureGr"
        case 922: // Recognized '{identifier}',	Shortest string "textureGa"
        case 923: // Recognized '{identifier}',	Shortest string "textureGat"
        case 924: // Recognized '{identifier}',	Shortest string "textureGath"
        case 925: // Recognized '{identifier}',	Shortest string "textureGathe"
        case 927: // Recognized '{identifier}',	Shortest string "textureGatherO"
        case 928: // Recognized '{identifier}',	Shortest string "textureGatherOf"
        case 929: // Recognized '{identifier}',	Shortest string "textureGatherOff"
        case 930: // Recognized '{identifier}',	Shortest string "textureGatherOffs"
        case 931: // Recognized '{identifier}',	Shortest string "textureGatherOffse"
        case 933: // Recognized '{identifier}',	Shortest string "textureLo"
        case 935: // Recognized '{identifier}',	Shortest string "textureO"
        case 936: // Recognized '{identifier}',	Shortest string "textureOf"
        case 937: // Recognized '{identifier}',	Shortest string "textureOff"
        case 938: // Recognized '{identifier}',	Shortest string "textureOffs"
        case 939: // Recognized '{identifier}',	Shortest string "texturePr"
        case 940: // Recognized '{identifier}',	Shortest string "texturePro"
        case 942: // Recognized '{identifier}',	Shortest string "textureProjG"
        case 943: // Recognized '{identifier}',	Shortest string "imageSi"
        case 944: // Recognized '{identifier}',	Shortest string "texel"
        case 945: // Recognized '{identifier}',	Shortest string "texelF"
        case 946: // Recognized '{identifier}',	Shortest string "texelFe"
        case 947: // Recognized '{identifier}',	Shortest string "texelFet"
        case 948: // Recognized '{identifier}',	Shortest string "texelFetc"
        case 949: // Recognized '{identifier}',	Shortest string "ce"
        case 950: // Recognized '{identifier}',	Shortest string "cr"
        case 951: // Recognized '{identifier}',	Shortest string "co"
        case 952: // Recognized '{identifier}',	Shortest string "cl"
        case 953: // Recognized '{identifier}',	Shortest string "cla"
        case 954: // Recognized '{identifier}',	Shortest string "con"
        case 955: // Recognized '{identifier}',	Shortest string "coh"
        case 956: // Recognized '{identifier}',	Shortest string "cohe"
        case 957: // Recognized '{identifier}',	Shortest string "coher"
        case 958: // Recognized '{identifier}',	Shortest string "cohere"
        case 959: // Recognized '{identifier}',	Shortest string "cont"
        case 960: // Recognized '{identifier}',	Shortest string "conti"
        case 961: // Recognized '{identifier}',	Shortest string "contin"
        case 962: // Recognized '{identifier}',	Shortest string "cro"
        case 963: // Recognized '{identifier}',	Shortest string "cen"
        case 964: // Recognized '{identifier}',	Shortest string "cent"
        case 965: // Recognized '{identifier}',	Shortest string "centr"
        case 966: // Recognized '{identifier}',	Shortest string "centro"
        case 967: // Recognized '{identifier}',	Shortest string "share"
        case 968: // Recognized '{identifier}',	Shortest string "no"
        case 969: // Recognized '{identifier}',	Shortest string "nor"
        case 970: // Recognized '{identifier}',	Shortest string "noi"
        case 971: // Recognized '{identifier}',	Shortest string "nop"
        case 972: // Recognized '{identifier}',	Shortest string "nope"
        case 973: // Recognized '{identifier}',	Shortest string "noper"
        case 974: // Recognized '{identifier}',	Shortest string "nopers"
        case 975: // Recognized '{identifier}',	Shortest string "nopersp"
        case 976: // Recognized '{identifier}',	Shortest string "noperspe"
        case 977: // Recognized '{identifier}',	Shortest string "noperspec"
        case 978: // Recognized '{identifier}',	Shortest string "noperspect"
        case 979: // Recognized '{identifier}',	Shortest string "noperspecti"
        case 980: // Recognized '{identifier}',	Shortest string "volatil"
        case 981: // Recognized '{identifier}',	Shortest string "nois"
        case 982: // Recognized '{identifier}',	Shortest string "noise"
        case 983: // Recognized '{identifier}',	Shortest string "norm"
        case 984: // Recognized '{identifier}',	Shortest string "norma"
        case 985: // Recognized '{identifier}',	Shortest string "ou"
        case 987: // Recognized '{identifier}',	Shortest string "oute"
        case 988: // Recognized '{identifier}',	Shortest string "outer"
        case 989: // Recognized '{identifier}',	Shortest string "outerP"
        case 990: // Recognized '{identifier}',	Shortest string "outerPr"
        case 991: // Recognized '{identifier}',	Shortest string "outerPro"
        case 992: // Recognized '{identifier}',	Shortest string "outerProd"
        case 993: // Recognized '{identifier}',	Shortest string "is"
        case 994: // Recognized '{identifier}',	Shortest string "ii"
        case 996: // Recognized '{identifier}',	Shortest string "im"
        case 997: // Recognized '{identifier}',	Shortest string "ima"
        case 998: // Recognized '{identifier}',	Shortest string "imag"
        case 999: // Recognized '{identifier}',	Shortest string "image"
        case 1000: // Recognized '{identifier}',	Shortest string "imageS"
        case 1001: // Recognized '{identifier}',	Shortest string "imageA"
        case 1002: // Recognized '{identifier}',	Shortest string "imageL"
        case 1003: // Recognized '{identifier}',	Shortest string "imageLo"
        case 1004: // Recognized '{identifier}',	Shortest string "imageAt"
        case 1005: // Recognized '{identifier}',	Shortest string "imageAto"
        case 1006: // Recognized '{identifier}',	Shortest string "imageAtom"
        case 1007: // Recognized '{identifier}',	Shortest string "imageAtomi"
        case 1008: // Recognized '{identifier}',	Shortest string "imageAtomic"
        case 1009: // Recognized '{identifier}',	Shortest string "imageAtomicC"
        case 1010: // Recognized '{identifier}',	Shortest string "imageAtomicCo"
        case 1011: // Recognized '{identifier}',	Shortest string "imageSt"
        case 1012: // Recognized '{identifier}',	Shortest string "imageSto"
        case 1013: // Recognized '{identifier}',	Shortest string "inv"
        case 1015: // Recognized '{identifier}',	Shortest string "inte"
        case 1016: // Recognized '{identifier}',	Shortest string "inter"
        case 1017: // Recognized '{identifier}',	Shortest string "interp"
        case 1018: // Recognized '{identifier}',	Shortest string "interpo"
        case 1019: // Recognized '{identifier}',	Shortest string "interpol"
        case 1020: // Recognized '{identifier}',	Shortest string "interpola"
        case 1021: // Recognized '{identifier}',	Shortest string "interpolat"
        case 1022: // Recognized '{identifier}',	Shortest string "interpolate"
        case 1023: // Recognized '{identifier}',	Shortest string "interpolateA"
        case 1024: // Recognized '{identifier}',	Shortest string "interpolateAt"
        case 1025: // Recognized '{identifier}',	Shortest string "interpolateAtC"
        case 1026: // Recognized '{identifier}',	Shortest string "interpolateAtS"
        case 1027: // Recognized '{identifier}',	Shortest string "interpolateAtSa"
        case 1028: // Recognized '{identifier}',	Shortest string "interpolateAtSam"
        case 1029: // Recognized '{identifier}',	Shortest string "interpolateAtSamp"
        case 1030: // Recognized '{identifier}',	Shortest string "interpolateAtCe"
        case 1031: // Recognized '{identifier}',	Shortest string "interpolateAtCen"
        case 1032: // Recognized '{identifier}',	Shortest string "interpolateAtCent"
        case 1033: // Recognized '{identifier}',	Shortest string "interpolateAtCentr"
        case 1034: // Recognized '{identifier}',	Shortest string "interpolateAtCentro"
        case 1035: // Recognized '{identifier}',	Shortest string "inve"
        case 1036: // Recognized '{identifier}',	Shortest string "inva"
        case 1037: // Recognized '{identifier}',	Shortest string "invar"
        case 1038: // Recognized '{identifier}',	Shortest string "invari"
        case 1039: // Recognized '{identifier}',	Shortest string "inver"
        case 1040: // Recognized '{identifier}',	Shortest string "invers"
        case 1042: // Recognized '{identifier}',	Shortest string "inverses"
        case 1043: // Recognized '{identifier}',	Shortest string "isi"
        case 1044: // Recognized '{identifier}',	Shortest string "isn"
        case 1045: // Recognized '{identifier}',	Shortest string "isin"
        case 1046: // Recognized '{identifier}',	Shortest string "si"
        case 1047: // Recognized '{identifier}',	Shortest string "st"
        case 1048: // Recognized '{identifier}',	Shortest string "su"
        case 1049: // Recognized '{identifier}',	Shortest string "sa"
        case 1050: // Recognized '{identifier}',	Shortest string "sw"
        case 1051: // Recognized '{identifier}',	Shortest string "sh"
        case 1052: // Recognized '{identifier}',	Shortest string "sm"
        case 1053: // Recognized '{identifier}',	Shortest string "smo"
        case 1054: // Recognized '{identifier}',	Shortest string "smoo"
        case 1055: // Recognized '{identifier}',	Shortest string "smoot"
        case 1057: // Recognized '{identifier}',	Shortest string "smooths"
        case 1058: // Recognized '{identifier}',	Shortest string "smoothst"
        case 1059: // Recognized '{identifier}',	Shortest string "sha"
        case 1060: // Recognized '{identifier}',	Shortest string "shar"
        case 1061: // Recognized '{identifier}',	Shortest string "swi"
        case 1062: // Recognized '{identifier}',	Shortest string "swit"
        case 1063: // Recognized '{identifier}',	Shortest string "switc"
        case 1064: // Recognized '{identifier}',	Shortest string "sam"
        case 1065: // Recognized '{identifier}',	Shortest string "samp"
        case 1066: // Recognized '{identifier}',	Shortest string "sampl"
        case 1068: // Recognized '{identifier}',	Shortest string "sampler"
        case 1069: // Recognized '{identifier}',	Shortest string "sampler2"
        case 1070: // Recognized '{identifier}',	Shortest string "sampler1"
        case 1071: // Recognized '{identifier}',	Shortest string "samplerC"
        case 1072: // Recognized '{identifier}',	Shortest string "samplerCu"
        case 1073: // Recognized '{identifier}',	Shortest string "samplerCub"
        case 1075: // Recognized '{identifier}',	Shortest string "samplerCubeA"
        case 1076: // Recognized '{identifier}',	Shortest string "samplerCubeAr"
        case 1077: // Recognized '{identifier}',	Shortest string "samplerCubeArr"
        case 1078: // Recognized '{identifier}',	Shortest string "samplerCubeArra"
        case 1080: // Recognized '{identifier}',	Shortest string "samplerCubeS"
        case 1081: // Recognized '{identifier}',	Shortest string "samplerCubeSh"
        case 1082: // Recognized '{identifier}',	Shortest string "samplerCubeSha"
        case 1083: // Recognized '{identifier}',	Shortest string "samplerCubeShad"
        case 1084: // Recognized '{identifier}',	Shortest string "samplerCubeShado"
        case 1088: // Recognized '{identifier}',	Shortest string "sub"
        case 1089: // Recognized '{identifier}',	Shortest string "subr"
        case 1090: // Recognized '{identifier}',	Shortest string "subro"
        case 1091: // Recognized '{identifier}',	Shortest string "subrou"
        case 1092: // Recognized '{identifier}',	Shortest string "subrout"
        case 1093: // Recognized '{identifier}',	Shortest string "subrouti"
        case 1094: // Recognized '{identifier}',	Shortest string "str"
        case 1095: // Recognized '{identifier}',	Shortest string "stru"
        case 1096: // Recognized '{identifier}',	Shortest string "re"
        case 1097: // Recognized '{identifier}',	Shortest string "ro"
        case 1098: // Recognized '{identifier}',	Shortest string "ra"
        case 1099: // Recognized '{identifier}',	Shortest string "rad"
        case 1100: // Recognized '{identifier}',	Shortest string "radi"
        case 1101: // Recognized '{identifier}',	Shortest string "radia"
        case 1102: // Recognized '{identifier}',	Shortest string "rou"
        case 1103: // Recognized '{identifier}',	Shortest string "roun"
        case 1105: // Recognized '{identifier}',	Shortest string "roundE"
        case 1106: // Recognized '{identifier}',	Shortest string "roundEv"
        case 1107: // Recognized '{identifier}',	Shortest string "res"
        case 1108: // Recognized '{identifier}',	Shortest string "ret"
        case 1109: // Recognized '{identifier}',	Shortest string "ref"
        case 1110: // Recognized '{identifier}',	Shortest string "rea"
        case 1111: // Recognized '{identifier}',	Shortest string "refl"
        case 1112: // Recognized '{identifier}',	Shortest string "retu"
        case 1113: // Recognized '{identifier}',	Shortest string "retur"
        case 1114: // Recognized '{identifier}',	Shortest string "rest"
        case 1115: // Recognized '{identifier}',	Shortest string "restr"
        case 1116: // Recognized '{identifier}',	Shortest string "restri"
        case 1117: // Recognized '{identifier}',	Shortest string "ex"
        case 1118: // Recognized '{identifier}',	Shortest string "ve"
        case 1119: // Recognized '{identifier}',	Shortest string "vo"
        case 1120: // Recognized '{identifier}',	Shortest string "vol"
        case 1121: // Recognized '{identifier}',	Shortest string "vola"
        case 1122: // Recognized '{identifier}',	Shortest string "volat"
        case 1123: // Recognized '{identifier}',	Shortest string "volati"
        case 1124: // Recognized '{identifier}',	Shortest string "ver"
        case 1125: // Recognized '{identifier}',	Shortest string "vers"
        case 1126: // Recognized '{identifier}',	Shortest string "versi"
return (int)GLSLTokenType.Identifier;
            break;
        case 19: // Recognized '{constNumber}',	Shortest string "2"
return (int)GLSLTokenType.Number;
            break;
        case 24: // Recognized '{comment}',	Shortest string "//"
        case 25: // Recognized '{comment}',	Shortest string "/**/"
return (int)GLSLTokenType.Comment;
            break;
        case 39: // Recognized '{systemFunction}',	Shortest string "fma"
        case 558: // Recognized '{systemFunction}',	Shortest string "not"
        case 578: // Recognized '{systemFunction}',	Shortest string "packSnorm4x8"
        case 614: // Recognized '{systemFunction}',	Shortest string "mod"
        case 626: // Recognized '{systemFunction}',	Shortest string "memoryBarrier"
        case 750: // Recognized '{systemFunction}',	Shortest string "exp"
        case 751: // Recognized '{systemFunction}',	Shortest string "exp2"
        case 762: // Recognized '{systemFunction}',	Shortest string "sin"
        case 785: // Recognized '{systemFunction}',	Shortest string "atomicCounter"
        case 907: // Recognized '{systemFunction}',	Shortest string "texture"
        case 926: // Recognized '{systemFunction}',	Shortest string "textureGather"
        case 932: // Recognized '{systemFunction}',	Shortest string "textureGatherOffset"
        case 934: // Recognized '{systemFunction}',	Shortest string "texelFetch"
        case 941: // Recognized '{systemFunction}',	Shortest string "textureProj"
        case 1041: // Recognized '{systemFunction}',	Shortest string "inverse"
        case 1104: // Recognized '{systemFunction}',	Shortest string "round"
return (int)GLSLTokenType.SystemFunction;
            break;
        case 93: // Recognized '{systemVariable}',	Shortest string "gl_in"
        case 204: // Recognized '{systemVariable}',	Shortest string "gl_SampleMask"
return (int)GLSLTokenType.SystemVariable;
            break;
        case 569: // Recognized '{qualifier}',	Shortest string "flat"
        case 986: // Recognized '{qualifier}',	Shortest string "out"
        case 995: // Recognized '{qualifier}',	Shortest string "in"
        case 1056: // Recognized '{qualifier}',	Shortest string "smooth"
        case 1067: // Recognized '{qualifier}',	Shortest string "sample"
return (int)GLSLTokenType.Qualifier;
            break;
        case 603: // Recognized '{class}',	Shortest string "mat2"
        case 604: // Recognized '{class}',	Shortest string "mat2x2"
        case 667: // Recognized '{class}',	Shortest string "bool"
        case 696: // Recognized '{class}',	Shortest string "vec2"
        case 807: // Recognized '{class}',	Shortest string "float"
        case 866: // Recognized '{class}',	Shortest string "imageCube"
        case 871: // Recognized '{class}',	Shortest string "image1D"
        case 872: // Recognized '{class}',	Shortest string "image2D"
        case 873: // Recognized '{class}',	Shortest string "uint"
        case 1014: // Recognized '{class}',	Shortest string "int"
        case 1074: // Recognized '{class}',	Shortest string "samplerCube"
        case 1079: // Recognized '{class}',	Shortest string "samplerCubeArray"
        case 1085: // Recognized '{class}',	Shortest string "sampler1D"
        case 1086: // Recognized '{class}',	Shortest string "sampler2DRect"
        case 1087: // Recognized '{class}',	Shortest string "sampler2D"
return (int)GLSLTokenType.Class;
            break;
        case 693: // Recognized '{keyword}',	Shortest string "if"
        case 711: // Recognized '{keyword}',	Shortest string "do"
return (int)GLSLTokenType.Keyword;
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner

// ==============================================================
// <auto-generated>
// This code automatically produced from an embedded resource.
// Do not edit this file, or it will become incompatible with 
// the specification from which it was generated.
// </auto-generated>
// ==============================================================

// Code copied from GPLEX embedded resource
    [Serializable]
    public class BufferException : Exception
    {
        public BufferException() { }
        public BufferException(string message) : base(message) { }
        public BufferException(string message, Exception innerException)
            : base(message, innerException) { }
        protected BufferException(SerializationInfo info, StreamingContext context)
            : base(info, context) { }
    }

    public abstract class ScanBuff
    {
        private string fileNm;

        public const int EndOfFile = -1;
        public const int UnicodeReplacementChar = 0xFFFD;

        public bool IsFile { get { return (fileNm != null); } }
        public string FileName { get { return fileNm; } set { fileNm = value; } }

        public abstract int Pos { get; set; }
        public abstract int Read();
        public virtual void Mark() { }

        public abstract string GetString(int begin, int limit);

        public static ScanBuff GetBuffer(string source)
        {
            return new StringBuffer(source);
        }

        public static ScanBuff GetBuffer(IList<string> source)
        {
            return new LineBuffer(source);
        }

#if (!NOFILES)
        public static ScanBuff GetBuffer(Stream source)
        {
            return new BuildBuffer(source);
        }

#if (!BYTEMODE)
        public static ScanBuff GetBuffer(Stream source, int fallbackCodePage)
        {
            return new BuildBuffer(source, fallbackCodePage);
        }
#endif // !BYTEMODE
#endif // !NOFILES
    }

    #region Buffer classes

    // ==============================================================
    // =====  Definitions for various ScanBuff derived classes   ====
    // ==============================================================
    // ===============         String input          ================
    // ==============================================================

    /// <summary>
    /// This class reads characters from a single string as
    /// required, for example, by Visual Studio language services
    /// </summary>
    sealed class StringBuffer : ScanBuff
    {
        string str;        // input buffer
        int bPos;          // current position in buffer
        int sLen;

        public StringBuffer(string source)
        {
            this.str = source;
            this.sLen = source.Length;
            this.FileName = null;
        }

        public override int Read()
        {
            if (bPos < sLen) return str[bPos++];
            else if (bPos == sLen) { bPos++; return '\n'; }   // one strike, see new line
            else { bPos++; return EndOfFile; }                // two strikes and you're out!
        }

        public override string GetString(int begin, int limit)
        {
            //  "limit" can be greater than sLen with the BABEL
            //  option set.  Read returns a "virtual" EOL if
            //  an attempt is made to read past the end of the
            //  string buffer.  Without the guard any attempt 
            //  to fetch yytext for a token that includes the 
            //  EOL will throw an index exception.
            if (limit > sLen) limit = sLen;
            if (limit <= begin) return "";
            else return str.Substring(begin, limit - begin);
        }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }

        public override string ToString() { return "StringBuffer"; }
    }

    // ==============================================================
    //  The LineBuff class contributed by Nigel Horspool, 
    //  nigelh@cs.uvic.cs
    // ==============================================================

    sealed class LineBuffer : ScanBuff
    {
        IList<string> line;    // list of source lines from a file
        int numLines;          // number of strings in line list
        string curLine;        // current line in that list
        int cLine;             // index of current line in the list
        int curLen;            // length of current line
        int curLineStart;      // position of line start in whole file
        int curLineEnd;        // position of line end in whole file
        int maxPos;            // max position ever visited in whole file
        int cPos;              // ordinal number of code in source

        // Constructed from a list of strings, one per source line.
        // The lines have had trailing '\n' characters removed.
        public LineBuffer(IList<string> lineList)
        {
            line = lineList;
            numLines = line.Count;
            cPos = curLineStart = 0;
            curLine = (numLines > 0 ? line[0] : "");
            maxPos = curLineEnd = curLen = curLine.Length;
            cLine = 1;
            FileName = null;
        }

        public override int Read()
        {
            if (cPos < curLineEnd)
                return curLine[cPos++ - curLineStart];
            if (cPos++ == curLineEnd)
                return '\n';
            if (cLine >= numLines)
                return EndOfFile;
            curLine = line[cLine];
            curLen = curLine.Length;
            curLineStart = curLineEnd + 1;
            curLineEnd = curLineStart + curLen;
            if (curLineEnd > maxPos)
                maxPos = curLineEnd;
            cLine++;
            return curLen > 0 ? curLine[0] : '\n';
        }

        // To speed up searches for the line containing a position
        private int cachedPosition;
        private int cachedIxdex;
        private int cachedLineStart;

        // Given a position pos within the entire source, the results are
        //   ix     -- the index of the containing line
        //   lstart -- the position of the first character on that line
        private void findIndex(int pos, out int ix, out int lstart)
        {
            if (pos >= cachedPosition)
            {
                ix = cachedIxdex; lstart = cachedLineStart;
            }
            else
            {
                ix = lstart = 0;
            }
            while (ix < numLines)
            {
                int len = line[ix].Length + 1;
                if (pos < lstart + len) break;
                lstart += len;
                ix++;
            }
            cachedPosition = pos;
            cachedIxdex = ix;
            cachedLineStart = lstart;
        }

        public override string GetString(int begin, int limit)
        {
            if (begin >= maxPos || limit <= begin) return "";
            int endIx, begIx, endLineStart, begLineStart;
            findIndex(begin, out begIx, out begLineStart);
            int begCol = begin - begLineStart;
            findIndex(limit, out endIx, out endLineStart);
            int endCol = limit - endLineStart;
            string s = line[begIx];
            if (begIx == endIx)
            {
                // the usual case, substring all on one line
                return (endCol <= s.Length) ?
                    s.Substring(begCol, endCol - begCol)
                    : s.Substring(begCol) + "\n";
            }
            // the string spans multiple lines, yuk!
            StringBuilder sb = new StringBuilder();
            if (begCol < s.Length)
                sb.Append(s.Substring(begCol));
            for (; ; )
            {
                sb.Append("\n");
                s = line[++begIx];
                if (begIx >= endIx) break;
                sb.Append(s);
            }
            if (endCol <= s.Length)
            {
                sb.Append(s.Substring(0, endCol));
            }
            else
            {
                sb.Append(s);
                sb.Append("\n");
            }
            return sb.ToString();
        }

        public override int Pos
        {
            get { return cPos; }
            set
            {
                cPos = value;
                findIndex(cPos, out cLine, out curLineStart);
                // cLine should be the *next* line after curLine.
                curLine = (cLine < numLines ? line[cLine++] : "");
                curLineEnd = curLineStart + curLine.Length;
            }
        }

        public override string ToString() { return "LineBuffer"; }
    }

#if (!NOFILES)
    // ==============================================================
    // =====     class BuildBuff : for unicode text files    ========
    // ==============================================================

    class BuildBuffer : ScanBuff
    {
        // Double buffer for char stream.
        class BufferElement
        {
            StringBuilder bldr = new StringBuilder();
            StringBuilder next = new StringBuilder();
            int minIx;
            int maxIx;
            int brkIx;
            bool appendToNext;

            internal BufferElement() { }

            internal int MaxIndex { get { return maxIx; } }
            // internal int MinIndex { get { return minIx; } }

            internal char this[int index]
            {
                get
                {
                    if (index < minIx || index >= maxIx)
                        throw new BufferException("Index was outside data buffer");
                    else if (index < brkIx)
                        return bldr[index - minIx];
                    else
                        return next[index - brkIx];
                }
            }

            internal void Append(char[] block, int count)
            {
                maxIx += count;
                if (appendToNext)
                    this.next.Append(block, 0, count);
                else
                {
                    this.bldr.Append(block, 0, count);
                    brkIx = maxIx;
                    appendToNext = true;
                }
            }

            internal string GetString(int start, int limit)
            {
                if (limit <= start)
                    return "";
                if (start >= minIx && limit <= maxIx)
                    if (limit < brkIx) // String entirely in bldr builder
                        return bldr.ToString(start - minIx, limit - start);
                    else if (start >= brkIx) // String entirely in next builder
                        return next.ToString(start - brkIx, limit - start);
                    else // Must do a string-concatenation
                        return
                            bldr.ToString(start - minIx, brkIx - start) +
                            next.ToString(0, limit - brkIx);
                else
                    throw new BufferException("String was outside data buffer");
            }

            internal void Mark(int limit)
            {
                if (limit > brkIx + 16) // Rotate blocks
                {
                    StringBuilder temp = bldr;
                    bldr = next;
                    next = temp;
                    next.Length = 0;
                    minIx = brkIx;
                    brkIx = maxIx;
                }
            }
        }

        BufferElement data = new BufferElement();

        int bPos;            // Postion index in the StringBuilder
        BlockReader NextBlk; // Delegate that serves char-arrays;

        private string EncodingName
        {
            get
            {
                StreamReader rdr = NextBlk.Target as StreamReader;
                return (rdr == null ? "raw-bytes" : rdr.CurrentEncoding.BodyName);
            }
        }

        public BuildBuffer(Stream stream)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Raw(stream);
        }

#if (!BYTEMODE)
        public BuildBuffer(Stream stream, int fallbackCodePage)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Get(stream, fallbackCodePage);
        }
#endif

        /// <summary>
        /// Marks a conservative lower bound for the buffer,
        /// allowing space to be reclaimed.  If an application 
        /// needs to call GetString at arbitrary past locations 
        /// in the input stream, Mark() is not called.
        /// </summary>
        public override void Mark() { data.Mark(bPos - 2); }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }


        /// <summary>
        /// Read returns the ordinal number of the next char, or 
        /// EOF (-1) for an end of stream.  Note that the next
        /// code point may require *two* calls of Read().
        /// </summary>
        /// <returns></returns>
        public override int Read()
        {
            //
            //  Characters at positions 
            //  [data.offset, data.offset + data.bldr.Length)
            //  are available in data.bldr.
            //
            if (bPos < data.MaxIndex)
            {
                // ch0 cannot be EOF
                return (int)data[bPos++];
            }
            else // Read from underlying stream
            {
                // Experimental code, blocks of page size
                char[] chrs = new char[4096];
                int count = NextBlk(chrs, 0, 4096);
                if (count == 0)
                    return EndOfFile;
                else
                {
                    data.Append(chrs, count);
                    return (int)data[bPos++];
                }
            }
        }

        public override string GetString(int begin, int limit)
        {
            return data.GetString(begin, limit);
        }

        public override string ToString()
        {
            return "StringBuilder buffer, encoding: " + this.EncodingName;
        }
    }

    // =============== End ScanBuff-derived classes ==================

    public delegate int BlockReader(char[] block, int index, int number);

    // A delegate factory, serving up a delegate that
    // reads a block of characters from the underlying
    // encoded stream, via a StreamReader object.
    //
    public static class BlockReaderFactory
    {
        public static BlockReader Raw(Stream stream)
        {
            return delegate(char[] block, int index, int number)
            {
                byte[] b = new byte[number];
                int count = stream.Read(b, 0, number);
                int i = 0;
                int j = index;
                for (; i < count; i++, j++)
                    block[j] = (char)b[i];
                return count;
            };
        }

#if (!BYTEMODE)
        public static BlockReader Get(Stream stream, int fallbackCodePage)
        {
            Encoding encoding;
            int preamble = Preamble(stream);

            if (preamble != 0)  // There is a valid BOM here!
                encoding = Encoding.GetEncoding(preamble);
            else if (fallbackCodePage == -1) // Fallback is "raw" bytes
                return Raw(stream);
            else if (fallbackCodePage != -2) // Anything but "guess"
                encoding = Encoding.GetEncoding(fallbackCodePage);
            else // This is the "guess" option
            {
                int guess = new Guesser(stream).GuessCodePage();
                stream.Seek(0, SeekOrigin.Begin);
                if (guess == -1) // ==> this is a 7-bit file
                    encoding = Encoding.ASCII;
                else if (guess == 65001)
                    encoding = Encoding.UTF8;
                else             // ==> use the machine default
                    encoding = Encoding.Default;
            }
            StreamReader reader = new StreamReader(stream, encoding);
            return reader.Read;
        }

        static int Preamble(Stream stream)
        {
            int b0 = stream.ReadByte();
            int b1 = stream.ReadByte();

            if (b0 == 0xfe && b1 == 0xff)
                return 1201; // UTF16BE
            if (b0 == 0xff && b1 == 0xfe)
                return 1200; // UTF16LE

            int b2 = stream.ReadByte();
            if (b0 == 0xef && b1 == 0xbb && b2 == 0xbf)
                return 65001; // UTF8
            //
            // There is no unicode preamble, so we
            // return denoter for the machine default.
            //
            stream.Seek(0, SeekOrigin.Begin);
            return 0;
        }
#endif // !BYTEMODE
    }
#endif // !NOFILES
    #endregion Buffer classes

    // ==============================================================
    // ============      class CodePageHandling         =============
    // ==============================================================
#if (!NOFILES)
    public static class CodePageHandling
    {
        public static int GetCodePage(string option)
        {
            string command = option.ToUpperInvariant();
            if (command.StartsWith("CodePage:", StringComparison.OrdinalIgnoreCase))
                command = command.Substring(9);
            try
            {
                if (command.Equals("RAW"))
                    return -1;
                else if (command.Equals("GUESS"))
                    return -2;
                else if (command.Equals("DEFAULT"))
                    return 0;
                else if (char.IsDigit(command[0]))
                    return int.Parse(command, CultureInfo.InvariantCulture);
                else
                {
                    Encoding enc = Encoding.GetEncoding(command);
                    return enc.CodePage;
                }
            }
            catch (FormatException)
            {
                Console.Error.WriteLine(
                    "Invalid format \"{0}\", using machine default", option);
            }
            catch (ArgumentException)
            {
                Console.Error.WriteLine(
                    "Unknown code page \"{0}\", using machine default", option);
            }
            return 0;
        }
    }
#region guesser
#if (!BYTEMODE)
    // ==============================================================
    // ============          Encoding Guesser           =============
    // ==============================================================

    /// <summary>
    /// This class provides a simple finite state automaton that
    /// scans the file looking for (1) valid UTF-8 byte patterns,
    /// (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
    /// The method then guesses whether it is UTF-8 or maybe some 
    /// local machine default encoding.  This works well for the
    /// various Latin encodings.
    /// </summary>
    internal class Guesser
    {
        ScanBuff buffer;

        public int GuessCodePage() { return Scan(); }

        const int maxAccept = 10;
        const int initial = 0;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int EndToken = 0;

        #region user code
        /* 
         *  Reads the bytes of a file to determine if it is 
         *  UTF-8 or a single-byte code page file.
         */
        public long utfX;
        public long uppr;
        #endregion user code

        int state;
        int currentStart = startState[0];
        int code;

        #region ScannerTables
        static int[] startState = new int[] { 11, 0 };

        #region CharacterMap
        static sbyte[] map = new sbyte[256] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '@' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'P' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '`' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'p' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xC0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xD0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/*   '\xF0' */ 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5 };
        #endregion

        static sbyte[][] nextState = new sbyte[][] {
            new sbyte[] {0, 0, 0, 0, 0, 0},
            new sbyte[] {-1, -1, 10, -1, -1, -1},
            new sbyte[] {-1, -1, -1, -1, -1, -1},
            new sbyte[] {-1, -1, 8, -1, -1, -1},
            new sbyte[] {-1, -1, 5, -1, -1, -1},
            new sbyte[] {-1, -1, 6, -1, -1, -1},
            new sbyte[] {-1, -1, 7, -1, -1, -1},
            null,
            new sbyte[] {-1, -1, 9, -1, -1, -1},
            null,
            null,
            new sbyte[] {-1, 1, 2, 3, 4, 2}
        };


        [SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        // Reason for suppression: cannot have self-reference in array initializer.
        static Guesser()
        {
            nextState[7] = nextState[2];
            nextState[9] = nextState[2];
            nextState[10] = nextState[2];
        }

        int NextState()
        {
            if (code == ScanBuff.EndOfFile)
                return eofNum;
            else
                return nextState[state][map[code]];
        }
        #endregion

        public Guesser(System.IO.Stream file) { SetSource(file); }

        public void SetSource(System.IO.Stream source)
        {
            this.buffer = new BuildBuffer(source);
            code = buffer.Read();
        }

        int Scan()
        {
            for (; ; )
            {
                int next;
                state = currentStart;
                while ((next = NextState()) == goStart)
                    code = buffer.Read();

                state = next;
                code = buffer.Read();

                while ((next = NextState()) > eofNum)
                {
                    state = next;
                    code = buffer.Read();
                }
                if (state <= maxAccept)
                {
                    #region ActionSwitch
#pragma warning disable 162
                    switch (state)
                    {
                        case eofNum:
                            switch (currentStart)
                            {
                                case 11:
                                    if (utfX == 0 && uppr == 0) return -1; /* raw ascii */
                                    else if (uppr * 10 > utfX) return 0;   /* default code page */
                                    else return 65001;                     /* UTF-8 encoding */
                                    break;
                            }
                            return EndToken;
                        case 1: // Recognized '{Upper128}',	Shortest string "\xC0"
                        case 2: // Recognized '{Upper128}',	Shortest string "\x80"
                        case 3: // Recognized '{Upper128}',	Shortest string "\xE0"
                        case 4: // Recognized '{Upper128}',	Shortest string "\xF0"
                            uppr++;
                            break;
                        case 5: // Recognized '{Utf8pfx4}{Utf8cont}',	Shortest string "\xF0\x80"
                            uppr += 2;
                            break;
                        case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}',	Shortest string "\xF0\x80\x80"
                            uppr += 3;
                            break;
                        case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}',	Shortest string "\xF0\x80\x80\x80"
                            utfX += 3;
                            break;
                        case 8: // Recognized '{Utf8pfx3}{Utf8cont}',	Shortest string "\xE0\x80"
                            uppr += 2;
                            break;
                        case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}',	Shortest string "\xE0\x80\x80"
                            utfX += 2;
                            break;
                        case 10: // Recognized '{Utf8pfx2}{Utf8cont}',	Shortest string "\xC0\x80"
                            utfX++;
                            break;
                        default:
                            break;
                    }
#pragma warning restore 162
                    #endregion
                }
            }
        }
    } // end class Guesser
    
#endif // !BYTEMODE
#endregion
#endif // !NOFILES

// End of code copied from embedded resource

} // end namespace
